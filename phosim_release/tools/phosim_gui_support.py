#! /usr/bin/env python
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Oct 15, 2018 11:57:40 AM EDT  platform: Linux
#    Oct 17, 2018 11:09:21 AM EDT  platform: Linux

import sys
import os
import fnmatch
import subprocess
import random
import time
import filecmp

from shutil import copyfile
from shutil import copytree
from shutil import rmtree
try:
	from Tkinter import *
except ImportError:
	from tkinter import *

try:
	import ttk
	import tkMessageBox
	import tkFont
	py3 = 0
except ImportError:
	import tkinter.ttk as ttk
	from tkinter import messagebox as tkMessagebox
	from tkinter import font as tkFont
	py3 = 1

























def TabSelected():
    #print('PhoSim_gui_support.TabSelected')
    #sys.stdout.flush()
    #We really only use this to reset the color of the filter selection. For
    #some reason which escapes me the filter selection reverts to white in the
    #filter list box when a new tab is selected, even though the filterIndex,
    # i, remains set in the code.. So we reset the color of the selected
    #filter here.
    #Maybe only on macs:
    #print ('TabSelected: ' + str(filterIndex))
    #sys.stdout.flush()
    if (filterIndex != -1) :
        ofBox.itemconfigure(filterIndex,selectbackground="#7bd9d9")
        ofBox.itemconfigure(filterIndex,selectforeground="black")
        ofBox.select_set(filterIndex)
    #Same problem on numerics page
    highlightSelectedEntries(w.ScrolledSensorListBox)

    return

def InitCatalogEntry():
    #print('PhoSim_gui_support.InitCatalogEntry')Camera
    #sys.stdout.flush()
	return

def ToggleButton(button,buttonValue) :
    if ( buttonValue.get() == 0 ):
        if OnMac :
            button.configure(background="#7bd9d9")
            button.configure(foreground="black")
        #button.select()
        #buttonValue.set(1)
    else:
        if OnMac :
            button.configure(background="white")
        #button.deselect()
        #buttonValue.set(0)
    return

def SelectGenStarsCat():
	#print('phosim_gui_support.SelectGenStarsCat')
	#sys.stdout.flush()
	# If we get checked on load some default values
	#if ( Generat StarCat.get() == 1 ) :
	#	#Don't override existing entry
	#	if ( len(StarMinimumM.get())== 0 ) :
	#		StarMinimumM.set("15")
	#	if ( len(StarMaximumM.get())== 0 ) :
	#		StarMaximumM.set("30")
	#else:
	#	StarMinimumM.set("")
	#	StarMaximumM.set("")

	#Does nothing for now
	return

def SelectGenStarGridCat():
    #print('phosim_gui_support.SelectGenStarGridCat')
    #sys.stdout.flush()
	return

def SelectGenGalaxiesCat():
    #print('phosim_gui_support.SelectGenGalaxiesCat')
    #sys.stdout.flush()
	#if ( GenerateGalaxyCat.get() == 1 ) :
	#	#Don't override existing entry
	#	if ( len(GalaxyMinimumM.get())== 0 ) :
	#		GalaxyMinimumM.set("15")
	#	if ( len(GalaxyMaximumM.get())== 0 ) :
	#		GalaxyMaximumM.set("30")
	#else:
	#	GalaxyMinimumM.set("")
	#	GalaxyMaximumM.set("")

	#Does nothing for now
	return

def MJDChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.MJDChange')
    #sys.stdout.flush()
	# Making an custom mJD setting. Clear the Now and Tonight check buttons
	#First check that entry is valid
	global MJDDeg, MJDEntryGood
	MJDDeg, MJDEntryGood = TestEntry(mjdDateDays, w.MJDEntry, True, 1000000.0,)
	if ( (len(w.MJDEntry.get()) == 0) or
         ( w.MJDEntry.get()== PhoSimDefault ) ) :
		SetMJDChkButtons("RandomNight")
	else:
		SetMJDChkButtons("none_selected")
	
def ExitPhosimGui():
    #print('PhoSimB_gui_support.ExitPhosimGui')
    #sys.stdout.flush()
	sys.exit()
	
def EditSelectedFile():
    # Find selected file and setup to edit it using the default editor.
    # Build directory path to where the files exist
    global modFileIndex
    instSelection=iBox.curselection()
    i=int(instSelection[0])
    instrument=listOfInst[i]
    modInstPath = phosimDataDir + "modified_" + instrument
 
    #Check to see if we have a selection
    mBox=w.ScrolledModifiedInstDirListBox
    modFileSelection=mBox.curselection()
    #Length is 0 if no selections.
    if (modFileIndex == -1) or (len(modFileSelection) == 0) :
        WriteToStatusBad('ICS', 'No File Selected!' + '\n')
        modFileIndex = -1
        return        
    else :
        modFileIndex=int(modFileSelection[0])
        selectedFile =  modInstPath + '/' + modInstFileList[modFileIndex]
        # Now edit the file. 
        EDITOR = os.environ.get('EDITOR','vim')
        subprocess.call([EDITOR, selectedFile])

        WriteToStatus("File: " +  modInstFileList[modFileIndex] + ' for ' +
                      instrument + ' modified!' + '\n', "Green")
        #Highlight this file as modified (if it was)
        instPath = phosimDataDir + instrument
        highlightModifiedFiles(instPath,modInstPath,modInstFileList)
        #Clear this files selection
        mBox.select_clear(modFileIndex)
        modFileIndex=-1
        return

def RestoreSelectedFile():
    #Restore Selected file in the modified inst directory with the original
    #file.  Get oath /file names 0f selected and original file.
    global modFileIndex
    instSelection=iBox.curselection()
    i=int(instSelection[0])
    instrument=listOfInst[i]
    instPath = phosimDataDir + instrument
    modInstPath = phosimDataDir + "modified_" + instrument
 
    #Check to see if we have a selection
    mBox=w.ScrolledModifiedInstDirListBox
    modFileSelection=mBox.curselection()
    #Length is 0 if no selections.
    if (modFileIndex == -1) or (len(modFileSelection) == 0) :
        WriteToStatusBad('ICS', 'No File Selected!' + '\n')
        modFileIndex = -1
        return        
    else :
        modFileIndex=int(modFileSelection[0])
        selectedFile = modInstPath + '/' + modInstFileList[modFileIndex]
        originalFile = instPath + '/' + modInstFileList[modFileIndex]
        # Now copy  the file.
        #print("Restoring: " + originalFile + " to " + selectedFile) 
        copyfile(originalFile,selectedFile)

        #Remove "modified" highlight.
        highlightModifiedFiles(instPath,modInstPath,modInstFileList)
        WriteToStatus("Restored file" +  modInstFileList[modFileIndex] +
                      '\n', "Green")
        return

def RestoreAllInstFiles() :
    # We do this in a brute force way. First deseletc all items
    # Then delete any modified directory and replace it with a new copy of
    # the original
    # We don't ask if user is sure. Maybe we should?

    global iBox
    instSelection=iBox.curselection()
    instIndex=int(instSelection[0])
    instrument=str(listOfInst[instIndex])
    modifiedInstDir = phosimDataDir + "modified_" + instrument
    
    mBox = w.ScrolledModifiedInstDirListBox   
    last = len(modInstFileList) -1
    mBox.selection_clear(0,last)
    rmtree( modifiedInstDir)        
    InitalizeModifiedInstrumentDirectory()
    WriteToStatus("Restored All Files from data/" +  instrument +
                  '\n', "Green")
       
def RunPhoSim():
	#First see if we are to use a premade catalog file
	# Present rule is that is we don't generate any catalogs, we are to
    #let phosim chose any defualts and we use the single star stargrid .1 .1
	global instanceFileName, commandFileName
	GenerateInstanceFile()
	GenerateCommandFile()
	
    #Now run Phosim
	BuildPhoSimCommand()
	if ( goodInstance ) :
		ExecutePhoSimCommand()

def RandomSeedChange():
    #print('phosim_gui_support.RandomSeedChange')
    #sys.stdout.flush()
	seed, SeedEntryGood = TestEntry(Seed, w.RandomSeedEntry, False,
									 100000000,1)

def StarMinMChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.StarMinMChange')
    #sys.stdout.flush()
	strMinM, strMinMEntryGood = TestEntry(StarMinimumM, w.StarMinMagEntry,
										  True, 50.0, -10.0)

def StarMaxMChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.StarMaxMChange')
    #sys.stdout.flush()
	strMaxM, strMaxMEntryGood = TestEntry(StarMaximumM, w.StarMaxMagEntry,
										  True, 50.0, -10.0)

def StarFOVChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.StarFOVChange')
    #sys.stdout.flush()
	strFovDeg, strFovEntryGood = TestEntry(StarFOVDeg, w.StarDiameterFOVEntry,
										   True, 180.0)

def StarGridSpacingChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.StarGridSpacingChange')
    #sys.stdout.flush()
	strGrdSpcDeg, strGrdSpcEntryGood = TestEntry(StarGridSpacingDeg,
										   w.GridSpacingEntry, True, 180.0)
def StarGridWidthChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.StarGridWidthChange')
    #sys.stdout.flush()
	strGrdWdthDeg, strGrdWdthEntryGood = TestEntry(StarGridWidthDeg,
									       w.StarGridWidthEntry, True, 180.0)
def StarGridMChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.StarGridMChange')
    #sys.stdout.flush()
	strGrdM, strGrdMEntryGood = TestEntry(StarGridMagnitude,
									       w.StarGridMagEntry, True, 50.0, -10.0)
	
def GalaxyMinMChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.GalaxyMinMChange')
    #sys.stdout.flush()
	galMinM, galMinMEntryGood = TestEntry(GalaxyMinimumM, w.GalaxyMinMagEntry,
										  True, 50.0, -10.0)
def GalaxyMaxMChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.GalaxyMaxMChange')
    #sys.stdout.flush()
	galMaxM, galMaxMEntryGood = TestEntry(GalaxyMaximumM, w.GalaxyMaxMagEntry,
										  True, 50.0, -10.0)
def GalaxyFOVChange():          #Run upon "Key Release" in entry box
    #print('phosim_gui_support.GalaxyFOVChange')
    #sys.stdout.flush()
	galFovDeg, galFovEntryGood = TestEntry(GalaxyFOVDeg, w.GalaxyFOVEntry,
										  True, 180.0)
	
def AzimuthDegChange():           #Run upon "Key Release" in entry box
	global AzDeg, AzimuthDegEntryGood
	AzDeg, AzimuthDegEntryGood = TestEntry(AzimuthDeg, w.AzimuthEntryDeg,
                                           True, 360.0)

def AltitudeDegChange():          #Run upon "Key Release" in entry box
    #print('PhoSim_gui_support.AltitudeChange')
    #sys.stdout.flush()
	global AltDeg, AltitudeDegEntryGood
	AltDeg, AltitudeDegEntryGood = TestEntry(AltitudeDeg, w.AltitudeEntryDeg,
                                             True, 90)

def RAhmsChange():             #Run upon "Key Release" in entry box
    #print('PhoSim_gui_support.RAhmsChange')
    #sys.stdout.flush()
	RADegUpdate()

def RADegEntryChange():       #Run upon "Key Release" in entry box
	#print('PhoSim_gui_support.RADegEntryChange')
	#sys.stdout.flush()
	#Update the RA
	RAHrMinSecUpdate()

def DecdmsChange():            #Run upon "Key Release" in entry box
    #print('PhoSim_gui_support.DecdmsChange')
    #sys.stdout.flush()
	DecDegUpdate()
	
	
def DecDegEntryChange():      #Run upon "Key Release" in entry box
    #print('PhoSim_gui_support.DecDegEntryChange')
    #sys.stdout.flush()
	DecDegMinSecUpdate()
	
	
def DomeLightIntensityChange():     #Run upon "Key Release" in entry box
	global DomeLightIntensity, DomeLightIntensityGood
	DomeLiteInt, DomeLightIntensityGood = TestEntry(DomeLightIntensity,
                                                    w.DomeLightIntensityEntry,
                                                    True, 40.0, -100.0)
def DomeLightWavelengthChange():     #Run upon "Key Release" in entry box
	global DomeLightWavelength, DomeLightWavelengthGood
	DomeLiteWvLn, DomeLightWavelengthGood = TestEntry(DomeLightWavelength,
                                                    w.DomeLightWavelengthEntry,
                                                    True, 30000.0)
def NumExpChange():
	global NSnapEntryGood
	NSnapI, NSnapEntryGood = TestEntry(nSnap, w.NSCameranapEntry, False, 1000000,1)

def VisitTimeChange():
	global  VisTimeEntryGood
	VisTime, VisTimeEntryGood = TestEntry(vistime, w.VistimeEntry,
												True, 10000.0, 0.0001)
def RotCamPosChange():
	global RotCamPosGood
	NRotTelPos, RotCamPosGood = TestEntry(RotCamPos, w.RotCamPosEntry,
                                          True, 360.0, -360.0)
def RotTelPosChange():
	global RotTelPosEntryGood
	NRotTelPos, RotTelPosEntryGood = TestEntry(RotTelPos, w.RotTelPosEntry,
												True, 360.0, -360.0)
def NSkipChange():
	global  NSkipEntryGood
	NSkip, NSkipEntryGood = TestEntry(nSkip, w.NSkipEntry, False, 1000000,1)

def CCDVoltageChange():
	global  CCDVoltageGood
	CCDVltI, CCDVoltageGood = TestEntry(CCDVoltage, w.CCDVoltageEntry,True,
                                        10000.0,-10000.0)
def CCDTemperatureChange():
	global  CCDTemperatureGood
	CCDTempI, CCDTemperatureGood = TestEntry(CCDTemperature,
                                             w.CCDTemperatureEntry, True,
                                             10000.0,0.0)
def NumFramesChange():
    global NFramesEntryGood
    NFramesI, NFramesEntryGood = TestEntry(nFrames, w.NFramesEntry, False,
                                           10000, 1)
def NumProcessorsChange():
    global NProcsEntryGood
    NProcsI, NProcsEntryGood = TestEntry(nProcessors, w.NProcessorsEntry,
                                         False, 1000000, 1)
def NumThreadsChange():
    global NThreadsEntryGood
    NThreadsI, NThreadsEntryGood = TestEntry(nThreads, w.NThreadsEntry, False,
                                             1000000,1)
def MinSourcesChange():
    global MinSourcesGood
    MinSourcesI, MinSourcesGood = TestEntry(MinSources, w.MinSourcesEntry,
                                            False, 10000000,1)
def SeeingChange():
    global SeeingEntryGood
    SeeingI, SeeingEntryGood = TestEntry(Seeing, w.SeeingEntry, True, 10.0)
    
def TemperatureChange():
    global TemperatureEntryGood
    TemperatureI, TemperatureEntryGood = TestEntry(Temperature,
                                     w.TemperatureEntry, True, 400.0, -274.0)
def PressureChange():
    global PressureEntryGood
    PressureI, PressureEntryGood = TestEntry(Pressure, w.PressureEntry, True,
                                             2000.0)
def SunAltitudeChange():
    global SunAltitudeGood
    SunAltitudeI, SunAltitudeGood = TestEntry(SunAltDeg, w.SunAltitudeEntry,
                                              True, 90.0, -90.0)
def MoonAltitudeChange():
    global MoonAltitudeGood
    MoonAltitudeI, MoonAltitudeGood = TestEntry(MoonAltDeg,
                                                w.MoonAltitudeEntry, True,
                                                90.0, -90.0)
def MoonRAChange():
    global MoonRAGood
    MoonRAI, MoonRAGood = TestEntry(MoonRADeg, w.MoonRAEntry, True, 360.0, 0.0)
    
def MoonDeclinationChange():
    global MoonDeclinationGood
    MoonDeclinationI, MoonDeclinationGood = TestEntry(MoonDecDeg,
                                                      w.MoonDeclinationEntry,
                                                      True, 90.0, -90.0)
def MoonDistanceChange():
    global MoonDistanceGood
    MoonDistanceI, MoonDistanceGood = TestEntry(MoonDistanceDeg,
                                                w.DistanceToMoonEntry, True,
                                                180.0, 0.0)
def MoonPhaseChange():
    global MoonPhaseGood
    MoonPhaseI, MoonPhaseGood = TestEntry(MoonPhase, w.MoonPhaseEntry, True,
                                          100.0, 0.0)

############################################################################

def FocusIn(entry) :
    #print("entry state: " + entry.get() )
    if ( entry.get() == PhoSimDefault ) :
       entry.set("")
    return
def FocusOut(entryGood,entry) :
    numCharInEntry=len(entry.get())
    if numCharInEntry == 0 : 
       entry.set(PhoSimDefault)
       entryGood = False;
    return
def FocusOut1(entry) :
    numCharInEntry=len(entry.get())
    if numCharInEntry == 0 : 
       entry.set(PhoSimDefault)
    return



#This binding is made in the init() function below.
def InstrumentSelected():
    #print('PhoSim_gui_support.InstrumentSelected')
    #sys.stdout.flush()
	#restore previous selected intrument background and set selected background
    global instIndex, iBox, w, listOfInst
    iBox.itemconfigure(instIndex,background="white")
    instSelection=iBox.curselection()
    instIndex=int(instSelection[0])
    iBox.itemconfigure(instIndex,background="#7bd9d9")
    iBox.itemconfigure(instIndex,foreground="black")
	#and set operator control page label to have Instrument name (in caps)
    instrument=str.upper(listOfInst[instIndex])
    
    FillFilterList()            #Display optics list  and longitude/lat
    FillSensorList()            #Add new sensor names to senso list box.

    #Display modified instrument config/definition files
    InitalizeModifiedInstrumentDirectory()

#This binding is made in the init() function below.
def OpticsFilterSelected():
    #Restore previous selected intrument background and set selected background
    global filterIndex, ofBox

    #get new filter selected
    filterSelection=ofBox.curselection()
    if (filterIndex != -1) :
        ofBox.itemconfigure(filterIndex,selectbackground="white")
        ofBox.select_clear(filterIndex)

    #If the filter "selected" is  the same as the one already selected,
    #leave it turned off
    fIndex=int(filterSelection[0])
    if fIndex != filterIndex :
        filterIndex=fIndex
        ofBox.itemconfigure(filterIndex,selectbackground="#7bd9d9")
        ofBox.itemconfigure(filterIndex,selectforeground="black")
    else:
        filterIndex = -1
    return

#This binding is made in the init() function below.
def SensorSelected():
    #print('PhoSim_gui_support.SennsorSelected')
    #sys.stdout.flush()
    global allAsNeededWasSelected
    global sensorCount
    #We can have any nuimber of sensors selected (except see special
    #case of "All as Needed" (AAN), see below)Camera
    #The curselection list will be correct since by cliking on an item it
    #gets its selection state toggled (behavior for selectmode=MULTIPLE)
    sensorBox=w.ScrolledSensorListBox
    sensorsSelected = sensorBox.curselection() #returns a tupple.

    #The selection list will be correct since by cliking on an item its
    # gets selection toggled (behavior for selectmode=MULTIPLE)
    #We really only have to worry about index == 0, AAN
    if len(sensorsSelected) == 0 :
        #Don't allow AAN (or only sensor if just 1)  to be toggled off,
        # also, if all other sensors are taggled off:  set AAN
        sensorBox.selection_set(0)
        if ( sensorCount > 1) :
            allAsNeededWasSelected = True
        
    else:   
        #In the case where AAN is found to be in the selected list 
        if sensorsSelected[0] == 0 :
            #If a new sensor was selected, Turn off ANN, if ANN is the new
            #selection clear all other and set ANN
            if len(sensorsSelected) > 1 : #at least 2.
                if allAsNeededWasSelected :
                    sensorBox.selection_clear(0)
                    allAsNeededWasSelected = False
                else :
                    sensorBox.selection_clear(1,END)
                    allAsNeededWasSelected = True
        else :
            allAsNeededWasSelected = False
            
    #Higlight backgounds of selected entries.
    #Clear backgrounds on non-selected entries
    highlightSelectedEntries(w.ScrolledSensorListBox)  
    return

def SelectFileToModify() :
    #Restore previous selected file name background and set selected background
    global modFileIndex
    mBox=w.ScrolledModifiedInstDirListBox
    #Clear old selection if there was one
    if (modFileIndex != -1) :
        mBox.select_clear(modFileIndex)
    #get new file selected. and toggle is on
    modFileSelection=mBox.curselection()
    #Length is 0 if no selections.
    if len(modFileSelection) > 0 :
        modFileIndex=int(modFileSelection[0])
    else :
        modFileIndex = -1

    highlightSelectedEntries(mBox)
    return

# #####################################################################
def highlightSelectedEntries(listBox) :
    # For desiginated list box, get a list of indices of selected entries,
    # clear backgrounds of all entries(->white) and set colors of the selected
    # entry backgrounds to #7bd9d9  (a shade of blue)
    global allAsNeededWasSelected

    selectedEntries=listBox.curselection()
    numSelected=len(selectedEntries)
    #print("NumSelected: " + str(numSelected))

    listSize=listBox.index(END)

    for i in range(listSize-1) :
        listBox.itemconfigure(i,selectbackground="white")

    if numSelected > 0 :
        for i in selectedEntries :
            listBox.itemconfigure(i,selectbackground="#7bd9d9")
            listBox.itemconfigure(i,selectforeground="black")
    return

# ###################################################################
def set_Tk_var():
    # Determine platform  and if mac adjust appropriate fonts
    platform = getPlatform()
    global OnMac
    OnMac=False
    if(platform == 'OS X' ) :
        print("on a mac")
        defaultFont = tkFont.nametofont("TkDefaultFont")
        defaultFont.configure(family="Palatino",size=12)
        defaultTextFont = tkFont.nametofont("TkTextFont")
        defaultTextFont.configure(family="Palatino",size=12)
        OnMac=True
    elif (platform == 'Linux' ) :
        print("Runing on Linux")
    elif (platform == 'Windows' ) :
        print ("Runnin on Windows")
    else:
        print("Unknown system: '" + platform + "'! Assuming linux")
    sys.stdout.flush()
    global PhoSimDefault
    PhoSimDefault = "PhoSim Default"

    global RotCamPosGood
    RotCamPosGood = bool()
    
    global instList
    instList = StringVar()
    global filterList
    filterList = StringVar()
    global sensorList
    sensorList = StringVar()
    global mjdDateDays
    mjdDateDays = StringVar()
    global noFiltersMessage
    noFiltersMessage = StringVar()
    global AzimuthDeg
    AzimuthDeg = StringVar()
    global AltitudeDeg
    AltitudeDeg = StringVar()
    global RADeg
    RADeg = StringVar()
    global DecDeg
    DecDeg = StringVar()
    global RAHours
    RAHours = StringVar()
    global RAMinutes
    RAMinutes = StringVar()
    global RASeconds
    RASeconds = StringVar()
    global DecMinutes
    DecMinutes = StringVar()
    global DecSeconds
    DecSeconds = StringVar()
    global DecIntDegrees
    DecIntDegrees = StringVar()
    global longitudeMsg
    longitudeMsg = StringVar()
    global latitudeMSG
    latitudeMSG = StringVar()
    global heightMSG
    heightMSG = StringVar()
    global vistime
    vistime = StringVar()
    global nSnap
    nSnap = StringVar()
    global Seed
    Seed = StringVar()
    global RotTelPos
    RotTelPos = StringVar()
    global RotCamPos
    RotCamPos = StringVar()
    global ObsID
    ObsID = StringVar()
    global GenerateStarCat
    GenerateStarCat = IntVar()
    global GenerateStarGridCat
    GenerateStarGridCat = IntVar()
    global GenerateGaxalyCat
    GenerateGaxalyCat = IntVar()
    global UseExistingCat
    UseExistingCat = IntVar()
    global GenerateGalaxyCat
    GenerateGalaxyCat = IntVar()
    global StarMinimumM
    StarMinimumM = StringVar()
    global GalaxyMinimumM
    GalaxyMinimumM = StringVar()
    global StarMaximumM
    StarMaximumM = StringVar()
    global GalaxyMaximumM
    GalaxyMaximumM = StringVar()
    global StarFOVDeg
    StarFOVDeg = StringVar()
    global GalaxyFOVDeg
    GalaxyFOVDeg = StringVar()
    global StarGridSpacingDeg
    StarGridSpacingDeg = StringVar()
    global StarGridWidthDeg
    StarGridWidthDeg = StringVar()
    global StarGridMagnitude
    StarGridMagnitude = StringVar()
    global NoBckGrd
    NoBckGrd = IntVar()
    global QuickBckGrd
    QuickBckGrd = IntVar()
    global NormalBckGrd
    NormalBckGrd = IntVar()
    global MJDTonight
    MJDTonight = IntVar()
    global MJDNow
    MJDNow = IntVar()
    global MJDRandomNight
    MJDRandomNight = IntVar()
    global nSkip
    nSkip = StringVar()
    global nFrames
    nFrames = StringVar()
    global CommandFileName
    CommandFileName = StringVar()
    global CatalogFileName
    CatalogFileName = StringVar()
    global nThreads
    nThreads = StringVar() 
    global MinSources
    MinSources = StringVar() 
    global nProcessors
    nProcessors = StringVar()
    global OutputPath
    OutputPath = StringVar()
    global WorkPath
    WorkPath = StringVar()
    global BinaryPath
    BinaryPath = StringVar()
    global DataPath
    DataPath = StringVar()
    global SEDPath
    SEDPath = StringVar()
    global TruthImagePath
    TruthImagePath = StringVar()
    global DisableE2ADC
    DisableE2ADC = IntVar()
    global KeepScreens
    KeepScreens = IntVar()
    global GridValue
    GridValue = StringVar()
    global Seeing
    Seeing = StringVar()
    global Temperature
    Temperature = StringVar()
    global Pressure
    Pressure = StringVar()
    global modInstList
    modInstList = StringVar()
    global UseModFiles
    UseModFiles = IntVar()
    global TelescopeConfig
    TelescopeConfig = StringVar()
    global DomeLightIntensity
    DomeLightIntensity = StringVar()
    global DomeLightWavelength
    DomeLightWavelength = StringVar()
    global LSSTScienceSensors
    LSSTScienceSensors = IntVar()
    global LSSTWavefrontSensors
    LSSTWavefrontSensors = IntVar()
    global LSSTGuiders
    LSSTGuiders = IntVar()
    global SunAltDeg
    SunAltDeg = StringVar()
    global MoonAltDeg
    MoonAltDeg = StringVar()
    global MoonRADeg
    MoonRADeg = StringVar()
    global MoonDecDeg
    MoonDecDeg = StringVar()
    global MoonDistanceDeg
    MoonDistanceDeg = StringVar()
    global MoonPhase
    MoonPhase = StringVar()
    global CCDVoltage
    CCDVoltage = StringVar()
    global CCDTemperature
    CCDTemperature = StringVar()
    

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    global AzDeg, AzimuthDegEntryGood, AltDeg, AltitudeDegEntryGood
    global RAEntryGood, DecEntryGood
    global SeedEntryGood, NSkipEntryGood, NSnapEntryGood, VisTimeEntryGood
    global MinSourcesGood
    global NFramesEntryGood,RotTelPosEntryGood
    global MJDRandomNightSelected, MJDTonightSelected, MJDNowSelected
    global MJDEntryGood
    global NThreadsEntryGood, NProcsEntryGood
    global DomeLightIntensityGood,DomeLightWavelengthGood
    global RotCamPosGood, CCDTemperatureGood, CCDVoltageGood
    
    AzimuthDegEntryGood  = False
    AltitudeDegEntryGood = False
    RAEntryGood  = False
    DecEntryGood = False
    DomeLightIntensityGood = False
    DomeLightWavelengthGood = False
    RotCamPosGood = False

	
    SeedEntryGood      = False
    NSkipEntryGood     = False
    NFramesEntryGood   = False
    RotTelPosEntryGood = False
    NThreadsEntryGood  = False
    NProcsEntryGood    = False
    MJDEntryGood       = False
    
    # root is top level widget
	# top is an instance of the PhoSim class which defines and holds all the
	# widgets within the root widget
    top_level = top
    root = top
    w = gui

	#Disable the resize of the root window
	#root.resizable(False, False)

	#The next gets the directory which the script was run from.
	# Thus thuis is NOT the workling directory
    global phosimToolsDir
    phosimToolsDir=os.path.split(os.path.abspath(__file__))[0]

    #Load PhoSim graphic 
    phosimImagePath= (phosimToolsDir + '/phosim_logo.gif')
    phosimImage=PhotoImage(file=phosimImagePath)
    w.TitleLabel.configure(image=phosimImage)
    w.TitleLabel.image=phosimImage
	
	# ###########################
	#Site/operator frame initialization
	# ###########################
	#Setup for entries in Site/operator Frame and display that frame 
    #w.ScrolledInstrumentListBox.bind('<ButtonRelease-1>',
	#								 lambda e:InstrumentSelected())
    #w.ScrolledOpticsFilterListBox.bind('<ButtonRelease-1>',
	#								   lambda e:OpticsFilterSelected())
    ShowSiteCharPage()

	#Fill intrument and filter lists, This also defualts to LSST, filter 0
    FillInstrumentList()
    FillFilterList()
	
	#Most things are not to be defaulted by the gui. phosim.py figures 
	#them out,but we can default a few tings
	# Camera rotation defaulted (will be determined by phosim.py)
    global IDObs, ISeed
    IDObs=int(0)
    obs='{:04}'.format(IDObs)
    ObsID.set(obs)
    ISeed=1000
    Seed.set(ISeed)

    #Univers Tab Init
    #pre select Universe frame for display
    ShowUniverseFrame()

    #TelescopeTab init
    AzimuthDeg.set(PhoSimDefault)
    AltitudeDeg.set(PhoSimDefault)
    RADeg.set(PhoSimDefault)
    DecDeg.set(PhoSimDefault)
    RotTelPos.set(PhoSimDefault)
    TelescopeConfig.set("0")
    DomeLightIntensity.set(PhoSimDefault)
    DomeLightWavelength.set(PhoSimDefault)
    
    #Camera Tab init
    nSnap.set("1")
    NSnapEntryGood = True
    vistime.set("15.0")
    VisTimeEntryGood = True
    nSkip.set(PhoSimDefault)
    nFrames.set(PhoSimDefault)
    RotCamPos.set(PhoSimDefault)
    CCDTemperatureGood = False;
    CCDTemperature.set(PhoSimDefault)
    CCDVoltageGood = False;
    CCDVoltage.set(PhoSimDefault)

    
    #Advanced tab
    # Has its own notebook.

    
    #Numerics Tab
    w.ScrolledSensorListBox.bind('<ButtonRelease-1>',lambda e:SensorSelected())
    FillSensorList()
    nThreads.set(PhoSimDefault)
    nProcessors.set(PhoSimDefault)
    GridValue.set("no")
    MinSourcesGood = False
    MinSources.set(PhoSimDefault)
    
    #ICS tab.
    # This tab is used for modifying the intrument configuration/definition
    # files in the intrumenrt directory. For lsst this id data/lsst
    # Scheme is to make a copy of the intrument directory into a new directory
    # whose name is derived from the intrumenrt directory name. For data/lsst
    # this would be data/modified_lsst
    # ##############
    # Setup modified_insturment directory andif new copy instrument directory
    # files into it.
    InitalizeModifiedInstrumentDirectory()

     
    #Directory Paths Tab:
    OutputPath.set(PhoSimDefault)
    WorkPath.set(PhoSimDefault)
    BinaryPath.set(PhoSimDefault)
    DataPath.set(PhoSimDefault)
    SEDPath.set(PhoSimDefault)
    TruthImagePath.set(PhoSimDefault)

    #Environment Tab
    global SeeingGood, PressureGood, TemperatureGood
    SeeingGood         = False
    TemperatureGood    = False
    PressureGood       = False
    Seeing.set(PhoSimDefault)
    Temperature.set(PhoSimDefault)
    Pressure.set(PhoSimDefault)
    

    #Sun and Moon Tab
    global SunAltitudeGood,MoonAltitudeGood, MoonRAGood, MoonDeclinationGood
    global MoonDistanceGood, MoonPhaseGood
    SunAltitudeGood = False
    MoonAltitudeGood = False
    MoonRAGood = False
    MoonDeclinationGood = False
    MoonDistanceGood = False
    MoonPhaseGood = False

    SunAltDeg.set(PhoSimDefault)
    MoonAltDeg.set(PhoSimDefault)
    MoonRADeg.set(PhoSimDefault)
    MoonDecDeg.set(PhoSimDefault)
    MoonDistanceDeg.set(PhoSimDefault)
    MoonPhase.set(PhoSimDefault)


    # #####################################
	#Clear various check buton groups
	# ####################################

	# Calatolg selecton and defaults
    SetCatGenChkButtons('none_selected')
    StarMinimumM.set("15")
    StarMaximumM.set("30")
    GalaxyMinimumM.set("15")
    GalaxyMaximumM.set("30")

	#SetExamplesChkButtons('none_selected')
    SetBckGrdChkButtons('No')
	#print("Noinit: " + str(NoBckGrd.get()) + " " +
	#		  str(QuickBckGrd.get()) + " " + str(NormalBckGrd.get()) )

    SetMJDChkButtons('RandomNight')
    #No defaults in the Mount/Sky entries,no MJD default
	#No defaults for phosimcatgen entries

# Find platform. from:
# https://www.webucator.com/how-to/
#            how-check-the-operating-system-with-python.cfm
def getPlatform():
    platforms = {
		'linux'  : 'Linux',
		'linux1' : 'Linux',
        'linux2' : 'Linux',
        'darwin' : 'OS X',
        'win32'  : 'Windows'
    }
    if sys.platform not in platforms:
        return sys.platform
    
    return platforms[sys.platform]

def InitalizeModifiedInstrumentDirectory() :
    # To give the user the option to edit and modify the selected instrument
    # configuration and definition files we will create a duplicate copy of
    # the intrument files directory. For lsst the original instrument file
    # is data/lsst. Since it is possible, and likely, that the modified
    # directory may already exist we only do this if it doesn't. In that case
    # we make a copy of this intrument directory into a new
    # directory whose name is derived from the intrumenrt directorie's name.
    # For data/lsst this would be data/modified_lsst
    # ##############
    # Check to see if modified directory exists. If not, make it, and copy
    # over original instrument directory
    global iBox
    global modFileIndex
    instSelection=iBox.curselection()
    instIndex=int(instSelection[0])
    instrument=str(listOfInst[instIndex])
    instDir = phosimDataDir + instrument
    modifiedInstDir = phosimDataDir + "modified_" + instrument
    #print("modifedInstDir: " + modifiedInstDir)
    #print ("exists: " + str(os.path.isdir( modifedInstDir)))
    
    if not os.path.isdir( modifiedInstDir) :
        #print ("copy over dir: " + instDir)
        copytree(instDir, modifiedInstDir)
    else :
        #Directory exists. find old new and modified files.
        dmcp = filecmp.dircmp(instDir, modifiedInstDir)

        #Copy over missing.
        for file in dmcp.left_only :
            srcPath= instDir + '/' + file
            if os.path.isfile(srcPath) :
                dstPath = modifiedInstDir + '/' + file
                copyfile(srcPath, dstPath)

    FillModifiedInstList()
    modFileIndex = -1
    return

def FillInstrumentList():
    #print('PhoSim_gui_support. FillInstrumentList')
    #sys.stdout.flush()
    global listOfInst, iBox, instIndex
    listOfInst=[]
    iBox=w.ScrolledInstrumentListBox

    #First get a list of all the files in directory phosimToolsDir/../data
    global phosimDataDir
    phosimDataDir = ( phosimToolsDir + '/../data/' )
    instDirList=os.listdir(os.path.expandvars(phosimDataDir))

    #Now find the ones that had in that directory a file called 'site.txt'
    for possibleInst in instDirList :
        if possibleInst.find("modified") == -1 : #Not a modified directory
            fname=phosimDataDir + possibleInst + "/site.txt"
            if os.path.isfile(fname)  :
                listOfInst.append(possibleInst)
	
    instString=str(listOfInst)[1:-1]
    instString=instString.replace(',','')
    instList.set(instString.replace("'",""))

    #Set instrument default to lsst *(better be there)
    #find index to lsst and activate it
    lsstIndex=listOfInst.index('lsst')

    iBox.select_set(lsstIndex)
    instSelection=iBox.curselection()
    instIndex=int(instSelection[0])
    iBox.itemconfigure(instIndex,background="#7bd9d9")
    iBox.itemconfigure(instIndex,foreground="black")

	#and set operator control page labe to have Instrument name (in caps)
    instrument=str.upper(listOfInst[instIndex])
    
def FillFilterList():
	#print('PhoSim_gui_support. FillFilterList')
	#sys.stdout.flush()
	global listOfFilter, ofBox, filtersExist, instrument, filterIndex
	listOfFilter=[]
	ofBox=w.ScrolledOpticsFilterListBox
	
    #First find out which instrument has been selected. This is also the
	#directory file name to where the filter files are
	instSelection=iBox.curselection()
	i=int(instSelection[0])
	instrument=listOfInst[i]

	#Construct path to filters and get a list of all the filter files in
	#selected instrument directory
	filterPath=phosimDataDir + instrument

	#get the centralwavelength.txt file path and read it in
	#This file has the filter names in it (second column)
	centralWavelengthPath=filterPath + "/central_wavelengths.txt"
    #Make sure this file exist and if so read it in.
	cntrlWavExists=False
	
	if os.path.isfile(centralWavelengthPath)  :
		cntrlWavExists = True
		cwFile = open(centralWavelengthPath,"r")
		cntrlWav = cwFile.readlines()
		cwFile.close()
		cntrlWav
		
	# now find all the optics files (which really are what we wanted).
	filterFileList=fnmatch.filter(os.listdir(filterPath), 'optics_*.txt')	
	if len(filterFileList) == 0:
		
		noFiltersMessage.set("No Optics Defined for " +  instrument)
		filtersExist = False
	else:
		filtersExist = True

        #Massage the list so we can put it into the filter list box
		#First convert it into a string and cleanup things
		filterString=str( filterFileList)[1:-1]
		filterString=filterString.replace('.txt','')
		filterString=filterString.replace('optics_','')
		filterString=filterString.replace(',','')
		filterString=filterString.replace("'","")

		#Convert the single string back to a sequence and 
		#sort the list alphabetically and numerically
		filterFileList=sorted(filterString.split(), key=alphaNumOrder)

		filterStringTuple=tuple(filterFileList)

		#At this point we will add in the filter Labels.
		#for each filter "index" search through the filterNames lines and
		#retriveve the filters Label
		if (cntrlWavExists) :
			filterAndLabelList =[]
			for fIndex in filterFileList :
				foundLabel=False
				for line in cntrlWav :
					#skip if a comment or blank
					if (len(line.strip()) != 0) and  (line[:1] != "#") :
						#see if this is the line we want
						#if so fill in the "filterIndex filterLabel" list
						lstr1 = line.split()
						if (lstr1[0] == fIndex) :
							filtNm=(fIndex + ": " + lstr1[1])
							filterAndLabelList.append(filtNm)
							foundLabel=True
				if(not foundLabel):
					filterAndLabelList.append(fIndex)
			
			filterStringTuple=tuple(filterAndLabelList)

		#Load tupple (with or without labels) into the filter list box.
		filterList.set(	filterStringTuple  )

		filterIndex=-1
	#print('FillFilterList: ' + str(filterIndex))
	sys.stdout.flush()
		
	DisplayInstrumentLocation()

#Sensors for this instrument come from the focalPlaneLayout
# Thus they depend on the Intrument selected.
def FillSensorList():
    #print('PhoSim_gui_support. FillSensorList')
    #sys.stdout.flush()
    global listOfSensors, instrument
    global allAsNeededWasSelected
    global sensorCount
    listOfSensors=[]
    sensorBox=w.ScrolledSensorListBox
	
    #First find out which instrument has been selected. This is also the
    #directory file name to where the focalplanelayout.txt files are kept.
    instSelection=iBox.curselection()  #Get the "slected" item (only 1 alowed)
    i=int(instSelection[0])
    instrument=listOfInst[i]

    #Construct path to foclaplanelayout and get a list of all the sensors
    #in the selected instrument directory
    instrumentPath=phosimDataDir + instrument

    #get the foclaplaneloayout file path and read it in
    #This file has the sensor names in it (first column)
    focalplanelayoutPath=instrumentPath + "/focalplanelayout.txt"
    #Make sure this file exists and if so read it in.

    focalplanelayoutExists=False
    if os.path.isfile(focalplanelayoutPath)  :
        focalplanelayoutExists = True
        fplFile = open(focalplanelayoutPath,"r")
        fpl = fplFile.readlines()
        fplFile.close()
    else:
        print("FillSensorlist-Fatal-No " + focalplanelayoutPath +
              " for sensors exist")
        sys.stdout.flush()
        sys.exit()


    # now fill all the sensor names (which really are what we wanted).
    #start with the default which will be "All as needed"
    sensorsExist = False
    if focalplanelayoutExists :
        listOfSensors.append("All as needed")
        sensorCount=0
        for line in fpl :
            #Replace all tabs with single space
            line = line.replace('\t', ' ')
            #ignore comments
            sensor = line.split(' ')[0]
            if not sensor[0].startswith('#'):     #Skips comments.
                listOfSensors.append(sensor)
                sensorCount=sensorCount+1
                sensorsExist = True
        #If only 1 sensor we don't need the "All as needed"
        if (sensorCount == 1) :   
            del listOfSensors[0]
            
    if not sensorsExist:
        print("FillSensorlist-Fatal-No sensors for " +
              "instrument " + instrument + " exist")
        sys.stdout.flush()
        sys.exit()
        
    fplStringTuple=tuple(listOfSensors)

    #Load tupple into the sensor list which is just one long comma speratered
    #string, I think.
    sensorList.set( fplStringTuple)
    
    #Clear all selections and then set the "All As Needed" or if only 1 sensor
    # set it.
    sensorBox.selection_clear(0,END)
    sensorBox.selection_set(0)
    if (sensorCount > 1 ) :
        allAsNeededWasSelected = True
        
    else :
        allAsNeededWasSelected = False
         
    highlightSelectedEntries(sensorBox)
    
    #print('FillFilterList: ' + str(filterIndex))
    #sys.stdout.flush()

def FillModifiedInstList():
    # Get file names in modified intrument config/definition  directory and
    # place the names in the .ScrolledModifiedInstDirListBox. Highlight the
    # modified ones in blue.
    # Build directory file name to where the original files exist
    global modInstFileList
    instSelection=iBox.curselection()
    i=int(instSelection[0])
    instrument=listOfInst[i]
    instPath =phosimDataDir + instrument
    modInstPath = phosimDataDir + "modified_" + instrument

    #os.listdir only lists the faile names (no paths)
    modInstFileList = os.listdir(modInstPath)

    #Massage the list so we can put it into the modInst list box
    #First convert it into a string and cleanup things
    modInstString=str( modInstFileList)[1:-1]
    modInstString=modInstString.replace(',','')
    modInstString=modInstString.replace("'","")

    #Convert the single string back to a sequence and 
    #sort the list alphabetically and numerically
    modInstFileList=sorted(modInstString.split(), key=alphaNumOrder)
    modInstStringTuple=tuple( modInstFileList )

    #Load tupple (with or without labels) into Modified Instrument list box.
    modInstList.set(modInstStringTuple )
    

    highlightModifiedFiles(instPath,modInstPath,modInstFileList)
    return

def highlightModifiedFiles(instPath,modInstPath, modInstFileList) :
    #Now find modified files and "highlite" them
    dmcp = filecmp.dircmp(instPath,modInstPath)
    for modifiedFile in dmcp.diff_files :
        filePath = modInstPath + '/' + modifiedFile
        if os.path.isfile(filePath)  :
            modifiedIndex= modInstFileList.index(modifiedFile)
            w.ScrolledModifiedInstDirListBox.itemconfigure(modifiedIndex,
                                                         background="#20ff08")
    for modifiedFile in dmcp.same_files :
        filePath = modInstPath + '/' + modifiedFile
        if os.path.isfile(filePath)  :
            modifiedIndex= modInstFileList.index(modifiedFile)
            w.ScrolledModifiedInstDirListBox.itemconfigure(modifiedIndex,
                                                         background="#ffffff")
            
    return

def alphaNumOrder(x):
	num = x.split(None, 1)[0]
	if num.isdigit():
		return int(num)
	return x


def DisplayInstrumentLocation():		
	#Now retrive the longitude and latitiude of the site.
	locationFile=phosimDataDir + instrument + "/location.txt"
	if os.path.isfile(locationFile)  :
		lFile = open(locationFile,"r")
		location = lFile.readlines()
		lFile.close()
		#Check that all 3 location values found
		longFound  = False
		latFound   = False
		hgtFound   = False
		spaceFound = False
		for line in location:
			#skip if a comment or blank
			if (len(line.strip()) != 0) and  (line.strip()[:1] != "#") :
				lstr1 = line.split()
				#see if this line is a location line
				if lstr1[0] == "longitude" :
					latitude = lstr1[1]
					latFound = True
				elif lstr1[0] == "latitude" :
					longitude = lstr1[1]
					longFound = True
				elif lstr1[0] == "groundlevel":
					heigt = lstr1[1]
					hgtFound = True
				elif lstr1[0] == "spacemode":
					spaceMode = lstr1[1]
					spaceFound = True
				
		if (longFound and latFound and hgtFound ) :		
			longitudeMsg.set("Longitude: " + longitude + " (deg)")
			latitudeMSG.set("Latitude:  " + latitude + " (deg)")
			heightMSG.set("Site Altitude: " + heigt + " (m)")
		elif (spaceFound ) :
			if spaceMode == "1" :
				mode = "Low Earth Orbit"
			else:
				mode = ("Lagrange Point " + str( int(spaceMode) - 1 ) ) 
			longitudeMsg.set(" In Space: " + mode)
			latitudeMSG.set("")
			heightMSG.set("")
		else:
			if (not longFound ) :
				WriteToStatusBad('Site Info','location.txt file for '
								 + instrument
								 + ' does not conatin longitude entry' + '\n')
				longitudeMsg.set("Longitude: Not Specified")
			if (not latFound ) :
				WriteToStatusBad('Site Info','location.txt file for '
								 + instrument
								 + 'does not conatin latitude entry' + '\n')
				latitudeMSG.set('Latitude:  Not Specified')
			if (not hgtFound ) :
				WriteToStatusBad('Site Info','location.txt file for ' + instrument
								 + 'does not conatine groundlevel entry'
								 + '\n')
				heightMsg.set('Site Altitude: Not Specified')
		
	else:
		longitudeMsg.set("Longitude: Not Specified")
		latitudeMSG.set("Latitude:  Not Specified")
		heightMSG.set("Site Altitude:  Not Specified")
		#print('No location file: ' + locationFile)
        WriteToStatus('No location file for instrument: ' + instrument +
                      '\n',"Blue")
        
		#objStatus = w.ScrolledStatusTextBox
		#objStatus.configure(foreground="Red")
		#stat=('No location file for instrument: ' + instrument + '\n')
		#objStatus.insert(END,stat)
		#objStatus.see(END)

def show_frame(frame):
	frame.tkraise()

def ShowSiteCharPage():
    show_frame(w.SiteCharacterizationFrame)

def ShowUniverseFrame():
	show_frame(w.UniverseFrame)

def RAHrMinSecUpdate():
	global RAEntryGood
	RA,RAEntryGood = TestEntry(RADeg, w.RAEntryDeg, True, 360.0)
	if not RAEntryGood :
		return
	RA=RA*24./360.0  #RA in hours
	RAHr=int(RA)
	RAHrFrac=RA-RAHr
	RAMin=int(RAHrFrac*60.0)
	RASecFrac=RA-RAHr-RAMin/60.0
	RASec=RASecFrac*60.0*60.0
	RAHours.set(RAHr)
	RAMinutes.set(RAMin)
	RASeconds.set(RASec)

def DecDegMinSecUpdate():
	global DecEntryGood
	Dec,DecEntryGood = TestEntry(DecDeg, w.DecEntryDeg, True, 90.0, -90.0) 
	if not DecEntryGood:
		return
	DecIntDeg=int(Dec)
	DecDegFrac=Dec-DecIntDeg
	DecMin=int(DecDegFrac*60.0)
	DecSecFrac=(Dec-DecIntDeg-DecMin/60.0)
	DecSec=DecSecFrac*60.0*60.0
	DecIntDegrees.set(DecIntDeg)
	DecMinutes.set(DecMin)
	DecSeconds.set(DecSec)

def DecDegUpdate():
	global DecEntryGood
	DecEntryGood=False
	Decdeg, degEntryGood = TestEntry(DecIntDegrees, w.DecEntryIntDegrees,
									 False, 90.0,-90.0)
	Decmin,minEntryGood = TestEntry(DecMinutes, w.DecEntryMin, False, 60, 0)
	Decsec,secEntryGood = TestEntry(DecSeconds, w.DecEntrySec, True, 60.0, 0.0)
	if (not degEntryGood) or (not minEntryGood) or (not secEntryGood) :
		return
	decSign=1
	if DecDeg<0:
		decSign=-1
	Dec=float(Decdeg)*decSign  #make positive
	DecMinFrac=float(Decmin)/60.0
	DecSecFrac=float(Decsec)/(60.0*60.0)

	Dec=(Dec+DecMinFrac+DecSecFrac)*decSign
	DecDeg.set(Dec)
	DecEntryGood = True

def RADegUpdate():
	global RAEntryGood
	
	RA,hrEntryGood = TestEntry(RAHours, w.RAEntryHours, False, 24)
	RAmin,minEntryGood = TestEntry(RAMinutes,	w.RAEntryMin, False, 60)
	RAsec, secEntryGood = TestEntry(RASeconds, w.RAEntrySec, True, 60.0)
	if (not hrEntryGood) or  ( not minEntryGood) or  ( not secEntryGood) :
		return
	RAMinFracHr=RAmin/60.0
	RASecFracHr = RAsec/(60.00*60.0)
	RA=(RA+RAMinFracHr+RASecFracHr)*360.0/24.   #Convert from hr to deg
	RADeg.set(str(RA))
	RAEntryGood = True
	
def TestEntry(entryValue, entryBox, IsFloatEntry, entryValueMax,
              entryValueMin=0.0):
    #If entry widget is clear set it white.
    if len(entryBox.get())== 0 :
        entryBox.configure(background="white")
        entryBox.configure(highlightbackground="#d9d9d9")
        return 0, False
    # Handle case where negative values are allowed and first typed char
    # was a "-"
    if ( (len(entryBox.get()) == 1) and (entryValueMin < 0.0) ) :
        if (entryValue.get() == "-" ) :
            entryBox.configure(background="white")
            entryBox.configure(highlightbackground="#d9d9d9")        
            return 0,False
    try:
        if IsFloatEntry :
            ent=float(entryValue.get())
        else:
            ent=int(entryValue.get())
    except ValueError :
        entryBox.configure(background="red")
        entryBox.configure(highlightbackground="red")
        return 0,False
    if (ent >= entryValueMax) or (ent < entryValueMin) :
        entryBox.configure(background="red")
        entryBox.configure(highlightbackground="red")
        return 0,False
    entryBox.configure(background="white")
    entryBox.configure(highlightbackground="#d9d9d9")
    return ent,True

#May want to enable multiple selections
def SetCatGenChkButtons(selected):    
	#print("selected: " + selected)
	#  If selected is "none_selected", all ChkGenChkButtons set off(=0)
	if selected == 'useExixtingCat' :
		UseExistingCat.set(1)

	if selected == 'genStarCat':
		GenerateStarCat.set(1)

	if selected == 'genStarGridCat':
		GenerateStarGridCat.set(1)

	if selected == 'genGalaxyCat':
		GenerateGalaxyCat.set(1)

	if  selected == 'none_selected':
		#print("none_selected")
		UseExistingCat.set(0)
		GenerateStarCat.set(0)
		GenerateStarGridCat.set(0)
		GenerateGalaxyCat.set(0)
	return

def SetMJDChkButtons(selected) :
	#The checkbuttons on macs don't seem to work very well. Thus I've gone to
	#using local bool types to specify what on and whats not. Also to
	#indicate what is check on macs I change the color of the checkbox lable
	#background
	#For both I use the select and deselect to control the "checks"(but on
	#macs it just gets rid of them when I use select/deselect!!!)
	#This may not de needed for checks  but is needed to "decheck"

	global MJDRandomNightSelected, MJDTonightSelected,MJDNowSelected
	if selected == 'RandomNight' :
		MJDRandomNightSelected = True
		if OnMac :
			w.MJDRandomNightCheckButton.configure(background="#7bd9d9")
			w.MJDRandomNightCheckButton.configure(background="black")
		else :
			MJDRandomNight.set(1)
			
		w.MJDRandomNightCheckButton.select()


		#Cleanup MJD entry box and make sure its not red
		MJDEntryGood = False
		mjdDateDays.set(PhoSimDefault)
		w.MJDEntry.configure(background = "white")
		#w.MJDEntry.configure(highlightbackground = "#d9d9d9")
		
	else:
		MJDRandomNightSelected = False
		if OnMac :
			w.MJDRandomNightCheckButton.configure(background="white")
		else :
			MJDRandomNight.set(0)
		#else :
		w.MJDRandomNightCheckButton.deselect()

	if selected == 'Tonight' :
		MJDTonightSelected = True
		if OnMac :
			w.MJDTonightCheckButton.configure(background="#7bd9d9")
			w.MJDTonightCheckButton.configure(foreground="black")
		#else :
		w.MJDTonightCheckButton.select()


		#Cleanup MJD entry box and make sure its not red
		MJDEntryGood = False
		mjdDateDays.set(PhoSimDefault)
		w.MJDEntry.configure(background = "white")
		#w.MJDEntry.configure(highlightbackground = "#d9d9d9")
		
	else:
		MJDTonightSelected = False
		if OnMac :
			w.MJDTonightCheckButton.configure(background="white")
		#else :
		w.MJDTonightCheckButton.deselect()

	if selected == 'Now' :
		MJDNowSelected = True
		if OnMac :
			w.MJDNowCheckButton.configure(background="#7bd9d9")
			w.MJDNowCheckButton.configure(foreground="black")
		#else :
		w.MJDNowCheckButton.select()
		
		mjdDateDays.set(PhoSimDefault)
		MJDEntryGood=False
		w.MJDEntry.configure(background="white")
		#w.MJDEntry.configure(highlightbackground="#d9d9d9")
	else:
		MJDNowSelected = False
		if OnMac :
			w.MJDNowCheckButton.configure(background="white")
		#else :
		w.MJDNowCheckButton.deselect()

	return
########################################################################

def SetBckGrdChkButtons(selected) :
	#The checkbuttons on macs don't seem to work very well. Thus I've gone to
	#using local bool types to specify what on and whats not. Also to
	#indicate what is check on macs I change the color of the checkbox lable
	#background
	#For both I use the select and deselect to control the "checks"(but on
	#macs it just gets rid of them when I use selectt/deselect!!!)
	#This may not de needed for checks  but is needed to "decheck"
	global NoBckGrdSelected, QuickBckGrdSelected, NormalBckGrdSelected

	if selected == 'No' :
		NoBckGrdSelected = True
		w.NoBckGrdCheckButton.select()
		if OnMac :
			w.NoBckGrdCheckButton.configure(background="#7bd9d9")
			w.NoBckGrdCheckButton.configure(foreground="black")
	if selected != 'No' :
		NoBckGrdSelected = False
		w.NoBckGrdCheckButton.deselect()
		if OnMac :
			w.NoBckGrdCheckButton.configure(background="white")

	if selected == 'Quick' :
		QuickBckGrdSelected = True
		w.QuickBckGrdCheckButton.select()
		if OnMac :
			w.QuickBckGrdCheckButton.configure(background="#7bd9d9")
			w.QuickBckGrdCheckButton.configure(foreground="black")
	if selected != 'Quick' :
		QuickBckGrdSelected = False
		w.QuickBckGrdCheckButton.deselect()
		if OnMac :
			w.QuickBckGrdCheckButton.configure(background="white")

	if selected == 'Normal':
		NormalBckGrdSelected = True
		w.NormalBckGrdCheckButton.select()		
		if OnMac :
			w.NormalBckGrdCheckButton.configure(background="#7bd9d9")
			w.NormalBckGrdCheckButton.configure(foreground="black")
	if selected != 'Normal':
		NormalBckGrdSelected = False
		w.NormalBckGrdCheckButton.deselect()		
		if OnMac :
			w.NormalBckGrdCheckButton.configure(background="white")
	return
############################################################################

def GenerateInstanceFile():
    #First genrate a unique filename.
    #print("Entering GenerateInstanceFile")
    #sys.stdout.flush()
    global AzimuthDegEntryGood, AltitudeDegEntryGood
    global RAEntryGood, DecEntryGood
    global instanceFileName, instanceFile, goodInstance
    global SeedEntryGood, NSkipEntryGood, NSnapEntryGood, VisTimeEntryGood
    global MinSourcesGood, NFramesEntryGood,RotTelPosEntryGood
    global IDObs
    global filterText
    global Seeing,     Pressure,     Temperature
    global SeeingGood, PressureGood, TemperatureGood
    global DomeConfig,DomeLightIntensityGood,DomeLightWavelengthGood
    global RotCamPosGood

    objStatus = w.ScrolledStatusTextBox
    objStatus.configure(foreground="Black")
    WriteToStatus('\n' + '\n')#Finish last line. Add a blank line
    #stat = "\n"
    #objStatus.insert(END,stat)   #Finish last line.
    #objStatus.insert(END,stat)   # add a blank line


    instancePath=os.getcwd()
    #Use unique number in file name, BUT!:Superceeded by using ObsID
    #Erase any exisiting file of this name
    obsid='{:04}'.format(IDObs)
    instanceFileName = instancePath + '/phosim' + obsid + '.inst'
    instanceFile = open(instanceFileName,"w")
	
    # We may want to add ability to use an existing instance file in the
    # future. See GenerateCommandFile for examples how to do this.

    #Now we load it up. Most entry boxes which were not set can be ignorerd
    # as phosim will generate default. So we have to check is entries were.
    instanceFile.write("obshistid " + ObsID.get() + "\n")

    # Only add ra/dec and/or alt/az if user set them.
    #Test that both were set. If not thats an error
	
    #Telescope Tab
    if ( RAEntryGood or DecEntryGood ) :
        if ( not ( RAEntryGood and  DecEntryGood ) ) :
            WriteToStatusBad('Telescope Entry Error',
							 'Both RA and  Dec must be set if either is set!')
            goodInstance= False
            return
        else:	 
            instanceFile.write("rightascension " + RADeg.get() + "\n")
            instanceFile.write("declination " + DecDeg.get() + "\n")

	if (AzimuthDegEntryGood or AltitudeDegEntryGood ) :
		if ( not ( AzimuthDegEntryGood and AltitudeDegEntryGood ) ) :
			WriteToStatusBad('Telescope Entry Error',
							 'Both Altitude and Azimuth must be set if '
							 + 'either is set!')
			goodInstance= False
			return
		else:
			instanceFile.write("azimuth " + AzimuthDeg.get() + "\n")
			instanceFile.write("altitude " + AltitudeDeg.get() + "\n")

	if RotTelPosEntryGood  :
		instanceFile.write("rottelpos " + RotTelPos.get() + "\n"  )

    if (TelescopeConfig.get() != "0" ) :
        instanceFile.write("telconfig " + TelescopeConfig.get() + '\n')
        if (TelescopeConfig.get() == "2" ) :  #Dome Light ON!
            if ( (DomeLightIntensity.get() != PhoSimDefault) and
                 (len(DomeLightIntensity.get()) > 0) ) :
                if DomeLightIntensityGood :
                    	instanceFile.write("domeint " +
                                           DomeLightIntensity.get() + '\n')
                else :
                     WriteToStatusBad('Dome Light Intensity Entry Error',
							 'Bad value for Dome Light Intensity!')
                     goodInstance = False
                     return
            if ( (DomeLightWavelength.get() != PhoSimDefault) and
                 (len(DomeLightWavelength.get()) > 0) ) :
                if DomeLightWavelengthGood :
                    	instanceFile.write("domeint " +
                                           DomeLightWavelength.get() + '\n')
                else :
                     WriteToStatusBad('Dome Light Wavelength Entry Error',
							 'Bad value for Dome Light Wavelength!')
                     goodInstance = False
                     return

	#Setup for the MJD. 4 different options here:
#    print("MJDNowSelected,MJDTonightSelected,w.MJDEntry,mjdDateDays: "
#          + str(MJDNowSelected) + ' ' + str(MJDTonightSelected) + ' '
#          + w.MJDEntry.get() + ' ' +  mjdDateDays.get() )
    sys.stdout.flush()
    if (MJDNowSelected) :
        # phosim will "chooses current time"
        instanceFile.write("mjd now" + "\n")
    elif (MJDTonightSelected ):
        # phosim will "chooses some time tonight at the longitude where
        # sun is below horizon
        instanceFile.write("mjd tonight" + "\n")
    elif ((w.MJDEntry.get() != PhoSimDefault) and len(w.MJDEntry.get()) > 0 ) :
        # phosim uses user entered mjd
        instanceFile.write("mjd " + mjdDateDays.get() + "\n")
		
	# Forth option is have user make no MJD selection or entry.
	# In this case phosim will "chooses a random time in the 21st
	# centurg when sun is below horizon at the longitude"

	#If no filter has been selected we let phosim.py do it.
	#print('GenerateInstance: ' + str(filterIndex) )
	#sys.stdout.flush()
	if ( filterIndex != -1 ) :
		filterText = ofBox.get(filterIndex)   #If more than 1 this is an error
		#Get substring berfore ":"
		filt=filterText.split(":")
			
		instanceFile.write("filter " + filt[0] + "\n")

	if SeedEntryGood :
		instanceFile.write("seed " + str(Seed.get()) + "\n"  )

    ##Camera Tab
    #The next are required
    #print("Testing VisTimeEntryGood: " + str(VisTimeEntryGood) )
    #sys.stdout.flush()
    if VisTimeEntryGood :
        instanceFile.write("vistime " + vistime.get() + "\n")
    else:
        WriteToStatusBad('Camera Entry Error',
                         'Visit Time must be specified!' )
        goodInstance = False
        return

    if NSnapEntryGood :
        instanceFile.write("nsnap " + nSnap.get() + "\n")
	if RotCamPosGood  :
		instanceFile.write("rotcampos " + RotCamPos.get() + "\n"  )
	if NSkipEntryGood :
		instanceFile.write("nskip " + nSkip.get() + "\n"  )
	if NFramesEntryGood :
		instanceFile.write("nframes " + nFrames.get() + "\n"  )
    if CCDVoltageGood :
        instanceFile.write("overdepbias " + CCDVoltage.get() + "\n"  )
    if CCDTemperatureGood :
        instanceFile.write("ccdtemp " + CCDTemperature.get() + "\n"  )

    #LSST Bit mask has bits set for enableing various sensors.
    # We could put a test here to make sure the instrument being usded was LSST
    LSSTBitMask =0;
    if ( LSSTScienceSensors.get() == 1 ) :   
        LSSTBitMask += 1       #bit 0
    if ( LSSTWavefrontSensors.get() == 1) :
        LSSTBitMask +=2        #bit 1
    if ( LSSTGuiders.get() == 1) :
        LSSTBitMask +=4        #bit 2
    if (LSSTBitMask != 0 ) :
        	instanceFile.write("camconfig " + str(LSSTBitMask) + "\n"  )
            
    #Numerics Tab
    if MinSourcesGood :
        instanceFile.write("minsource  " + MinSources.get() + "\n"  )

    ## Environment tab
    if SeeingGood  :
        instanceFile.write("seeing " + Seeing.get() + "\n"  )
    if PressureGood  :
        instanceFile.write("pressure  " + Pressure.get() + "\n"  )
    if TemperatureGood  :
        instanceFile.write("temperature " + Temperature.get() + "\n"  )
   

	# If we are to generate some simulated catalogs using phosimcatgen
	# generate the  commands to add to the instance file
	# stars  first: Check all arguments were set to something. Not cheking
	# limits here yet

	#Note all parameters were checked for validity when entered
	#We only have to check that they were all entered as required.
	if ( GenerateStarCat.get() == 1 ) :
		if ( StarMinimumM.get() and StarMaximumM.get() and StarFOVDeg.get() ):
			instanceFile.write("stars " + StarMinimumM.get() + " "
							   + StarMaximumM.get() + " " + StarFOVDeg.get()
							   + "\n")
		else:
			WriteToStatusBad('Universe Entry Error',
							 'All arguments to Generate Star Catalog must '
							 + 'be set!')
			goodInstance= False
			return
			

	if ( GenerateStarGridCat.get() == 1) :
		if (  StarGridSpacingDeg.get() and  StarGridWidthDeg.get()
			  and  StarGridMagnitude.get() ) :
			instanceFile.write("stargrid " + StarGridSpacingDeg.get() + " "
							   + StarGridWidthDeg.get() + " "
							   + StarGridMagnitude.get()+ "\n")
		else:
			WriteToStatusBad('Universe Entry Error',
							 'All arguments to Generate Star Grid Catalog '
							 + 'must be set!')
			goodInstance= False
			return
						
	if ( GenerateGalaxyCat.get() == 1) :
		if (  GalaxyMinimumM.get() and GalaxyMaximumM.get()
			  and GalaxyFOVDeg.get() ) :
			instanceFile.write("galaxies " + GalaxyMinimumM.get() + " "
							   + GalaxyMaximumM.get() + " "
							   + GalaxyFOVDeg.get()+ "\n")
		else:
			WriteToStatusBad('Universe Entry Error',
							 'All arguments to Generate Galaxy Catalog '
							 + 'must be set!')
			goodInstance= False
			return
			
	# We add any existing specified object catalog file name now. Check that
	# we have requested an existing catalog file, that it exists and it has
	# object in it. If so add it.         
    noCatalogObjects = True
    if ( UseExistingCat.get() == 1 ):
        catFileName=CatalogFileName.get()
        if  not catFileName :
            WriteToStatusBad('Existing Catalog Entry Error', 'Existing '
							 'catalog entry selected but no catalog file '
							 'specified!')
            goodInstance= False
            return
        if not os.path.isfile(catFileName) :
            WriteToStatusBad('Existing Catalog Entry Error', 'Specified '
							 'catalog file does not exist!' )
            goodInstance= False
            return
        noCatalogObjects=CheckCatlogForObjects( catFileName)
        if noCatalogObjects :
            WriteToStatusBad('Existing Catalog Entry Error', 'No objects '
							 'were found in specified Catalog file!')
            goodInstance= False
            return
        #OK. We are asked to add a catqalog file, and it exists and it has
        #objects lines in it. need to work on this bit more(only include
        # object lines, unpack objects out of any includeobj files????)
        #For right now we just includeobj the file (all of it!,
        #Better just be objects in it!)
        instanceFile.write("includeobj " +  CatalogFileName.get() + "\n")
			
    # Now, if no existing file and we are not generating catalogs, we are 
    # going to search through the examples/star file for any "object"s and
    # add that to end of the instance file
    if ( (GenerateStarCat.get() == 0 )
         and (GenerateStarGridCat.get() == 0 )
         and (GenerateGalaxyCat.get() == 0 )
         and (noCatalogObjects) ):
        #Gets here if:
        #1:No catalog was selected to be created
        #2:No catalog was explicitly specified
        #3:No existing instance file was used which had  "includeobj"
        #  or "oject"
        #In this case we need to generate a single star using the stargrid
        # command with specific arguments to make a single star
        instanceFile.write('stargrid 1 1 20'+ '\n')
        stat = ("Obs ID:" + '{:04}'.format(IDObs) +
                " No objects specified. Using single centered star." + '\n')
        WriteToStatus(stat,"Blue")
        
        #objStatus = w.ScrolledStatusTextBox
        #objStatus.insert(END,stat)
        #objStatus.see(END)

    #Sun and Moon Tab
    if SunAltitudeGood :
         instanceFile.write('sunalt '+ SunAltDeg.get() + '\n')
    if MoonAltitudeGood :
         instanceFile.write('moonalt '+ MoonAltDeg.get() + '\n')
    if MoonRAGood :
         instanceFile.write('moora '+ MoonRADeg.get() + '\n')
    if MoonDeclinationGood :
         instanceFile.write('moondec '+ MoonDecDeg.get() + '\n')
    if MoonDistanceGood :
         instanceFile.write('dist2moon '+ MoonDistanceDeg.get() + '\n')
    if MoonPhaseGood :
         instanceFile.write('moonphase '+ MoonPhase.get() + '\n')


    #print("Setting goodInstance to true")
    sys.stdout.flush()
    goodInstance = True

    #Defaulting to everything else for now.
    instanceFile.close()
    return

def GenerateCommandFile() :
	global IDobs,commandFileName,commandFileExists
	#Generate the command file name and Erase any exisiting file of this name
	instancePath=os.getcwd()
	obsid='{:04}'.format(IDObs)
	commandFileName  = instancePath + '/phosim' + obsid + '.cmd'

	#Get any entered command file name
	cmdFileName=CommandFileName.get()
	#print(cmdFileName)
	
	# If a pre-existing command file was entered, copy it over to out
	# command file. We will add and background file (or none) if they are
	# selected. to the end, thus their commands will take precidense
	
	if cmdFileName and os.path.isfile(cmdFileName):
		copyfile(cmdFileName,	commandFileName)		
		commandFileExists = True
	else:
		commandFileExists = False

	# Now we add in any selected background file.
	#If one is selected, append it s contents to the end of the command file
	FullBackgroundSelected=False
	if NoBckGrdSelected :
		BackgroundFile = (phosimToolsDir + "/../examples/nobackground")
	elif QuickBckGrdSelected :
		BackgroundFile = (phosimToolsDir + "/../examples/quickbackground")
	else:
		FullBackgroundSelected=True

	if (not FullBackgroundSelected ) :
		bckFile = open(BackgroundFile,"r")
		bck = bckFile.readlines()
		bckFile.close()
		if commandFileExists :
			commandFile = open(commandFileName,"a")
		else:
			commandFile = open(commandFileName,"w")

		commandFile.writelines(bck)
		commandFileExists = True
		commandFile.close()
	return
		
def WriteToStatusBad(StatusBoxTitle, StatusMsg) :
	tkMessageBox.showinfo(StatusBoxTitle, StatusMsg)
	WriteToStatus(StatusMsg,"Red")
    #objStatus = w.ScrolledStatusTextBox
	#objStatus.configure(foreground=statusColor)
	#objStatus.insert(END,StatusMsg)
	#objStatus.see(END)
	return

def WriteToStatus(StatusMsg, StatusColor = "Red") :
    objStatus = w.ScrolledStatusTextBox
    tagName=objStatus.index('end')   #fancy way to get a unique tag string
    #objStatus.configure(foreground=StatusColor, tagName)
    objStatus.insert(END,StatusMsg,tagName)
    objStatus.tag_config(tagName, foreground = StatusColor)
    objStatus.see(END)
    return
	
#def CheckInstForObjects( instFileName):
#	existFile=open(instFileName,"r")
#	lines=existFile.readlines()
#	existFile.close()
#	noObjects=True
#	for line in lines:
#		#skip if a comment or blank
#		if (len(line.strip()) != 0) and  (line.strip()[:1] != "#") :
#			lstr1 = line.split()
#			#see if this line is a object line
#			if lstr1[0] == "object" :
#				noObjects = False
#				if lstr1[0] == "includeobj" :
#					noObjects = False
#	return noObjects

def CheckCatlogForObjects( catFileName):
	catFile=open(catFileName,"r")
	lines=catFile.readlines()
	catFile.close()
	noObjects=True
	for line in lines:
		#skip if a comment or blank
		if (len(line.strip()) != 0) and  (line.strip()[:1] != "#") :
			lstr1 = line.split()
			#see if this line is a object line
			if lstr1[0] == "object" :
				noObjects = False
	return noObjects

# ######################################################################	
def BuildPhoSimCommand():
    global PhoSimRunCommand, phosimPath, commandFileName, commandFileExists
    global NThreadsEntryGood, NProcsEntryGood
    global allAsNeededWasSelected

    phosimPath = phosimToolsDir + '/../phosim'
    if (commandFileExists) :
        #command file specification option needed
        cmdOpt = " -c "
        cmdArg = commandFileName
    else:
        cmdOpt = ""
        cmdArg = ""

    #Numerics Tab
    if (NThreadsEntryGood) :
        #-t number of threads option needed
        threadOpt = " -t "
        threadArg = nThreads.get()
    else:
        threadOpt = ""
        threadArg = ""
              
    if (NProcsEntryGood) :
        #-p number of processors option needed
        procOpt = " -p "
        procArg = nProcessors.get()
    else:
        procOpt = ""
        procArg = ""

    if(DisableE2ADC.get() == 1 ) :
        e2adcOpt = " -e "
        e2adcArg = "0"
    else:
        e2adcOpt = ""
        e2adcArg = ""

    if (KeepScreens.get() == 1 ) :
        scrnOpt = " --keepscreens="
        scrnArg = "1"
    else :
        scrnOpt = ""
        scrnArg = ""

    if GridValue.get() != "no" :
        grdOpt = " -g "
        grdArg = GridValue.get()
    else :
        grdOpt = ""
        grdArg = ""

    #ICS Tab
    if (UseModFiles.get() == 1 ) :
        instOpt = " -i "
        instArg = "modified_" + instrument
        WriteToStatus("Using Modified Files for: " + instrument +
                      '\n', "green")
    else :
        instOpt = " -i "
        instArg = instrument
    

    #Camera Tab    
    if not allAsNeededWasSelected :
        #-s sensor/chip specification option needed
        aanOpt = " -s "
        sensorBox = w.ScrolledSensorListBox
        selectedSensors = sensorBox.curselection()

        numSensorsSelected = len(selectedSensors)
        
        aanArg = sensorBox.get(selectedSensors[0])   #get the first
        if (numSensorsSelected > 1) :
            #aanArg will be quoted string with "|" between selections
            aanArg = ( '"' +  aanArg)
            for i in range(1,numSensorsSelected) :
                sensor=sensorBox.get(selectedSensors[i])
                aanArg = (aanArg + "|" +  sensor )
            aanArg = (aanArg + '"')
    else :
        aanOpt = ""
        aanArg = ""

   

        
    #Now for the directory specs. Only specify if dir Path is
    #not PhoSimDefault and > 0 in length.
    if (OutputPath.get() != PhoSimDefault and len(OutputPath.get()) > 0 ):
        outdirOpt = " -o "
        outdirArg = OutputPath.get()
    else:
        outdirOpt = ""
        outdirArg = ""

    if (WorkPath.get() != PhoSimDefault and len(WorkPath.get()) > 0) :
        workdirOpt = " -w "
        workdirArg = WorkPath.get()
    else:
        workdirOpt = ""
        workdirArg = ""

    if (BinaryPath.get() != PhoSimDefault and len(BinaryPath.get()) > 0) :
        bindirOpt = " -b "
        bindirArg = BinaryPath.get()
    else:
        bindirOpt = ""
        bindirArg = ""

    if (DataPath.get() != PhoSimDefault and len(DataPath.get()) > 0) :
        datadirOpt = " -d "
        datadirArg = DataPath.get()
    else:
        datadirOpt = ""
        datadirArg = ""

    if (SEDPath.get() != PhoSimDefault and len(SEDPath.get()) >  0) :
        seddirOpt = " --sed="
        seddirArg = SEDPath.get()
    else:
        seddirOpt = ""
        seddirArg = ""

    if (TruthImagePath.get() != PhoSimDefault and
                                     len(TruthImagePath.get()) > 0) :
        timgdirOpt = " --image="
        timgdirArg = TruthImagePath.get()
    else:
        timgdirOpt = ""
        timgdirArg = ""
        
    #Build the phosim command.
    if (goodInstance) :
        PhoSimRunCommand = ( phosimPath + ' ' + instanceFileName +
                             cmdOpt + cmdArg + instOpt  + instArg +
                             procOpt + procArg + threadOpt + threadArg +
                             outdirOpt + outdirArg + workdirOpt + workdirArg +
                             bindirOpt + bindirArg + datadirOpt + datadirArg +
                             seddirOpt + seddirArg + timgdirOpt + timgdirArg +
                             e2adcOpt + e2adcArg + scrnOpt + scrnArg +
                             grdOpt + grdArg + aanOpt + aanArg + ' --ds9 ')
    else:
        PhoSimRunCommand = [phosimPath]

    #This will get more complicated as we add more options
    #still not done: -o,-w,-b,-d,-sed,-image,-h,-g,-u,-e,--keepscreens,
    #--checkpoint,----visulize,-v

    return
    
# ######################################################################	
def ExecutePhoSimCommand():
    global IDObs, ISeed
    #objStatus = w.ScrolledStatusTextBox

    print(PhoSimRunCommand)
    sys.stdout.flush()

    #And execute!
    subprocess.Popen(PhoSimRunCommand,shell=True)

    stat=("Obs ID:" + '{:04}'.format(IDObs)
          + " PhoSim Submitted for instrument: " + instrument)
    if ( filtersExist ):
        if (filterIndex != -1) :
            filterText = ofBox.get(filterIndex) 
            stat = (stat + ", filter: " + filterText)
        else:
            stat = (stat + ", no filter selected." )

    WriteToStatus(stat,"Black")
    #objStatus.insert(END,stat)
    #objStatus.see(END)

    #Incriment Observation ID and Seed  for next run.
    IDObs = IDObs+1
    obs='{:04}'.format(IDObs)
    ObsID.set(obs)
    ISeed=ISeed+1
    Seed.set(ISeed)
	
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

# ################################################################
# Save code from Examples frame. Saved because we may want it again.
# ################################################################
#def SelectedStar():
#    #print('PhoSim_gui_support.SelectedStar')
#    #sys.stdout.flush()
#	if Examplesstar.get()  == 1 :
#		SetExamplesChkButtons('star')

#def SelectedBrightstar():
#    #print('PhoSim_gui_support.SelectedBrightstar')
#    #sys.stdout.flush()
#	if Examplesbrightstar.get()  == 1 :
#		SetExamplesChkButtons('brightstar')

#def SelectedVerybrightstar():
#    #print('PhoSim_gui_support.SelectedVerybrightstar')
#    #sys.stdout.flush()
#	if Examplesverybrightstar.get()  == 1 :
#		SetExamplesChkButtons('verybrightstar')

#def SelectedSmallCatalog():
#    #print('PhoSim_gui_support.SelectedSmallCatalog')
#    #sys.stdout.flush()
#	if Examplessmallcat.get()  == 1 :
#		SetExamplesChkButtons('small_catalog')

#def SelectedLargeCatalog():
#    #print('PhoSim_gui_support.SelectedLargeCatalog')
#    #sys.stdout.flush()
#	if Exampleslargecat.get()  == 1 :
#		SetExamplesChkButtons('large_catalog')
	

#def SelectExamples():
#	#print('PhoSim_gui_support.SelectExamples')
#	#print('examplesCheck: ' + str(ExamplesCheck.get()))
#	#sys.stdout.flush()
#	#Check to see if check box was set or cleared
#	if ExamplesCheck.get() == 1 :
#		ShowExamplesFrame()
#	else:
#		ShowUniverseFrame()

#def ShowExamplesFrame():
#	show_frame(w.ExamplesFrame)

#def SetExamplesChkButtons(selected):
#	global selectedInstanceFileName, goodInstance, phosimExamplesDir
#	selectedInstanceFileName = ''
#	goodInstance = False
#	phosimExamplesDir = ( phosimToolsDir + '/../examples/')
#	if selected == 'star':
#		Examplesstar.set(1)
#		selectedInstanceFileName = 	phosimExamplesDir + 'star'
#		goodInstance = True
#	else:
#		Examplesstar.set(0)
#
#	if selected == 'brightstar' :
#		Examplesbrightstar.set(1)
#		selectedInstanceFileName = 	phosimExamplesDir + 'brightstar'
#		goodInstance = True
#	else:
#		Examplesbrightstar.set(0)
#
#
#	if selected == 'verybrightstar':
#		Examplesverybrightstar.set(1)
#		selectedInstanceFileName = 	phosimExamplesDir + 'verybrightstar'
#		goodInstance = True
#	else:
#		Examplesverybrightstar.set(0)
#
#	if selected == 'small_catalog':
#		Examplessmallcat.set(1)
#		selectedInstanceFileName = 	phosimExamplesDir + 'small_catalog'
#		goodInstance = True
#	else:
#		Examplessmallcat.set(0)
#
#	if  selected == 'large_catalog':
#		Exampleslargecat.set(1)
#		selectedInstanceFileName = phosimExamplesDir + 'large_catalog'
#		goodInstance = True
#	else:
#		Exampleslargecat.set(0)
#
#	return
#		
# #######################################################################

if __name__ == '__main__':
    import PhoSim_gui
    PhoSim_gui.vp_start_gui()















