#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.16d
# In conjunction with Tcl version 8.6
#    Dec 05, 2018 11:47:24 AM EST  platform: Linux

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import phosim_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    phosim_gui_support.set_Tk_var()
    top = PhoSim_gui (root)
    phosim_gui_support.init(root, top)
    root.mainloop()

w = None
def create_PhoSim_gui(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    phosim_gui_support.set_Tk_var()
    top = PhoSim_gui (w)
    phosim_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_PhoSim_gui():
    global w
    w.destroy()
    w = None


class PhoSim_gui:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#ffffff'  # X11 color: 'white'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family TkDefaultFont -size 10 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font11 = "-family {DejaVu Sans} -size 9 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family TkDefaultFont -size 10 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("799x869+1781+0")
        top.title("PhoSim_gui")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#ffffff")
        top.configure(highlightcolor="black")



        self.TitleFrame = Frame(top)
        self.TitleFrame.place(relx=0.01, rely=0.01, relheight=0.17
                , relwidth=0.97)
        self.TitleFrame.configure(relief=GROOVE)
        self.TitleFrame.configure(borderwidth="2")
        self.TitleFrame.configure(relief=GROOVE)
        self.TitleFrame.configure(background="#ffffff")
        self.TitleFrame.configure(width=775)

        self.TitleLabel = Label(self.TitleFrame)
        self.TitleLabel.place(relx=0.04, rely=0.0, height=129, width=729)
        self.TitleLabel.configure(activebackground="#f9f9f9")
        self.TitleLabel.configure(background="#ffffff")
        self.TitleLabel.configure(foreground="#0000d3")

        self.ControlFrame = Frame(top)
        self.ControlFrame.place(relx=0.01, rely=0.83, relheight=0.17
                , relwidth=0.97)
        self.ControlFrame.configure(relief=GROOVE)
        self.ControlFrame.configure(borderwidth="2")
        self.ControlFrame.configure(relief=GROOVE)
        self.ControlFrame.configure(background="#ffffff")
        self.ControlFrame.configure(width=775)

        self.RunPhoSimButton = Button(self.ControlFrame)
        self.RunPhoSimButton.place(relx=0.78, rely=0.24, height=35, width=130)
        self.RunPhoSimButton.configure(activebackground="#16ff05")
        self.RunPhoSimButton.configure(background="#0eb8f3")
        self.RunPhoSimButton.configure(highlightbackground="#f3fff4")
        self.RunPhoSimButton.configure(text='''Run PhoSim''')
        self.RunPhoSimButton.configure(width=130)
        self.RunPhoSimButton.configure(wraplength="110")
        self.RunPhoSimButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.RunPhoSim())

        self.ScrolledStatusTextBox = ScrolledText(self.ControlFrame)
        self.ScrolledStatusTextBox.place(relx=0.12, rely=0.17, relheight=0.63
                , relwidth=0.62)
        self.ScrolledStatusTextBox.configure(background="white")
        self.ScrolledStatusTextBox.configure(font="TkTextFont")
        self.ScrolledStatusTextBox.configure(highlightbackground="#ffffff")
        self.ScrolledStatusTextBox.configure(insertborderwidth="3")
        self.ScrolledStatusTextBox.configure(selectbackground="#c4c4c4")
        self.ScrolledStatusTextBox.configure(undo="1")
        self.ScrolledStatusTextBox.configure(width=10)
        self.ScrolledStatusTextBox.configure(wrap=NONE)

        self.fra81_lab93 = Label(self.ControlFrame)
        self.fra81_lab93.place(relx=0.03, rely=0.32, height=29, width=47)
        self.fra81_lab93.configure(activebackground="#f9f9f9")
        self.fra81_lab93.configure(anchor=W)
        self.fra81_lab93.configure(background="#ffffff")
        self.fra81_lab93.configure(text='''Status:''')

        self.ExitButton = Button(self.ControlFrame)
        self.ExitButton.place(relx=0.83, rely=0.62, height=25, width=53)
        self.ExitButton.configure(activebackground="#16ff05")
        self.ExitButton.configure(background="#d998d9")
        self.ExitButton.configure(text='''Exit''')
        self.ExitButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.ExitPhosimGui())

        self.ReferenceLabel = Label(self.ControlFrame)
        self.ReferenceLabel.place(relx=0.03, rely=0.84, height=21, width=699)
        self.ReferenceLabel.configure(activebackground="#f9f9f9")
        self.ReferenceLabel.configure(anchor=NW)
        self.ReferenceLabel.configure(background="#ffffff")
        self.ReferenceLabel.configure(text='''Visit https://bitbucket.org/phosim/phosim_release/ for more information.''')

        self.SiteCharacterizationFrame = Frame(top)
        self.SiteCharacterizationFrame.place(relx=0.01, rely=0.17, relheight=0.26
                , relwidth=0.97)
        self.SiteCharacterizationFrame.configure(relief=GROOVE)
        self.SiteCharacterizationFrame.configure(borderwidth="2")
        self.SiteCharacterizationFrame.configure(relief=GROOVE)
        self.SiteCharacterizationFrame.configure(background="#ffffff")
        self.SiteCharacterizationFrame.configure(width=775)

        self.InstrumentLabel = Label(self.SiteCharacterizationFrame)
        self.InstrumentLabel.place(relx=0.06, rely=0.04, height=22, width=127)
        self.InstrumentLabel.configure(activebackground="#f9f9f9")
        self.InstrumentLabel.configure(background="#ffffff")
        self.InstrumentLabel.configure(font=font10)
        self.InstrumentLabel.configure(text='''Instrument/Site''')

        self.ScrolledInstrumentListBox = ScrolledListBox(self.SiteCharacterizationFrame)
        self.ScrolledInstrumentListBox.place(relx=0.04, rely=0.13, relheight=0.59
                , relwidth=0.2)
        self.ScrolledInstrumentListBox.configure(background="white")
        self.ScrolledInstrumentListBox.configure(font="TkTextFont")
        self.ScrolledInstrumentListBox.configure(highlightcolor="#ffffff")
        self.ScrolledInstrumentListBox.configure(selectbackground="#c4c4c4")
        self.ScrolledInstrumentListBox.configure(width=10)
        self.ScrolledInstrumentListBox.configure(listvariable=phosim_gui_support.instList)
        self.ScrolledInstrumentListBox.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.InstrumentSelected())

        self.Label25 = Label(self.SiteCharacterizationFrame)
        self.Label25.place(relx=-0.03, rely=-0.71, height=19, width=198)
        self.Label25.configure(activebackground="#f9f9f9")
        self.Label25.configure(anchor=E)
        self.Label25.configure(background="#ffffff")
        self.Label25.configure(justify=RIGHT)
        self.Label25.configure(text='''Object Catalog File Name:''')

        self.ScrolledOpticsFilterListBox = ScrolledListBox(self.SiteCharacterizationFrame)
        self.ScrolledOpticsFilterListBox.place(relx=0.27, rely=0.14
                , relheight=0.59, relwidth=0.12)
        self.ScrolledOpticsFilterListBox.configure(background="white")
        self.ScrolledOpticsFilterListBox.configure(exportselection="0")
        self.ScrolledOpticsFilterListBox.configure(font="TkTextFont")
        self.ScrolledOpticsFilterListBox.configure(highlightcolor="#ffffff")
        self.ScrolledOpticsFilterListBox.configure(selectbackground="#c4c4c4")
        self.ScrolledOpticsFilterListBox.configure(width=10)
        self.ScrolledOpticsFilterListBox.configure(listvariable=phosim_gui_support.filterList)
        self.ScrolledOpticsFilterListBox.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.OpticsFilterSelected())

        self.Label5 = Label(self.SiteCharacterizationFrame)
        self.Label5.place(relx=0.44, rely=0.05, height=19, width=116)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(background="#ffffff")
        self.Label5.configure(font=font10)
        self.Label5.configure(text='''Site Location''')

        self.LongitudeMessage = Message(self.SiteCharacterizationFrame)
        self.LongitudeMessage.place(relx=0.4, rely=0.22, relheight=0.1
                , relwidth=0.32)
        self.LongitudeMessage.configure(anchor=W)
        self.LongitudeMessage.configure(background="#ffffff")
        self.LongitudeMessage.configure(text='''Longitude:''')
        self.LongitudeMessage.configure(textvariable=phosim_gui_support.longitudeMsg)
        self.LongitudeMessage.configure(width=247)

        self.LatitudeMessage = Message(self.SiteCharacterizationFrame)
        self.LatitudeMessage.place(relx=0.41, rely=0.31, relheight=0.1
                , relwidth=0.26)
        self.LatitudeMessage.configure(anchor=W)
        self.LatitudeMessage.configure(background="#ffffff")
        self.LatitudeMessage.configure(text='''Latitude:''')
        self.LatitudeMessage.configure(textvariable=phosim_gui_support.latitudeMSG)
        self.LatitudeMessage.configure(width=205)

        self.SiteAlt = Message(self.SiteCharacterizationFrame)
        self.SiteAlt.place(relx=0.4, rely=0.48, relheight=0.1, relwidth=0.32)
        self.SiteAlt.configure(anchor=W)
        self.SiteAlt.configure(background="#ffffff")
        self.SiteAlt.configure(textvariable=phosim_gui_support.heightMSG)
        self.SiteAlt.configure(width=249)

        self.OpticsFilterLabel = Label(self.SiteCharacterizationFrame)
        self.OpticsFilterLabel.place(relx=0.26, rely=0.05, height=19, width=116)
        self.OpticsFilterLabel.configure(activebackground="#f9f9f9")
        self.OpticsFilterLabel.configure(background="#ffffff")
        self.OpticsFilterLabel.configure(font=font10)
        self.OpticsFilterLabel.configure(text='''Optics/Filter''')

        self.ObsIDLabel = Label(self.SiteCharacterizationFrame)
        self.ObsIDLabel.place(relx=0.66, rely=0.4, height=19, width=149)
        self.ObsIDLabel.configure(activebackground="#f9f9f9")
        self.ObsIDLabel.configure(anchor=E)
        self.ObsIDLabel.configure(background="#ffffff")
        self.ObsIDLabel.configure(justify=RIGHT)
        self.ObsIDLabel.configure(text='''Observation Identifier:''')

        self.ObsIDEntry = Entry(self.SiteCharacterizationFrame)
        self.ObsIDEntry.place(relx=0.86, rely=0.39,height=26, relwidth=0.11)
        self.ObsIDEntry.configure(background="white")
        self.ObsIDEntry.configure(justify=RIGHT)
        self.ObsIDEntry.configure(selectbackground="#c4c4c4")
        self.ObsIDEntry.configure(textvariable=phosim_gui_support.ObsID)

        self.RandomSeedEntry = Entry(self.SiteCharacterizationFrame)
        self.RandomSeedEntry.place(relx=0.86, rely=0.21, height=26
                , relwidth=0.11)
        self.RandomSeedEntry.configure(background="white")
        self.RandomSeedEntry.configure(justify=RIGHT)
        self.RandomSeedEntry.configure(selectbackground="#c4c4c4")
        self.RandomSeedEntry.configure(textvariable=phosim_gui_support.Seed)
        self.RandomSeedEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.RandomSeedChange())

        self.RandomSeedLable = Label(self.SiteCharacterizationFrame)
        self.RandomSeedLable.place(relx=0.71, rely=0.23, height=19, width=106)
        self.RandomSeedLable.configure(activebackground="#f9f9f9")
        self.RandomSeedLable.configure(anchor=E)
        self.RandomSeedLable.configure(background="#ffffff")
        self.RandomSeedLable.configure(justify=RIGHT)
        self.RandomSeedLable.configure(text='''Random Seed:''')

        self.Label12 = Label(self.SiteCharacterizationFrame)
        self.Label12.place(relx=0.01, rely=0.85, height=19, width=746)
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(anchor=W)
        self.Label12.configure(background="#ffffff")
        self.Label12.configure(font=font11)
        self.Label12.configure(text='''"PhoSim Default": PhoSim chooses from a realistic distribution or self-consistently calculates the value.''')

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.UserDefinedNotebook = ttk.Notebook(top)
        self.UserDefinedNotebook.place(relx=0.01, rely=0.44, relheight=0.4
                , relwidth=0.97)
        self.UserDefinedNotebook.configure(width=772)
        self.UserDefinedNotebook.configure(takefocus="")
        self.UserDefinedNotebook_t0 = Frame(self.UserDefinedNotebook)
        self.UserDefinedNotebook.add(self.UserDefinedNotebook_t0, padding=3)
        self.UserDefinedNotebook.tab(0, text="Universe", compound="none"
                ,underline="-1", )
        self.UserDefinedNotebook_t0.configure(background="#ffffff")
        self.UserDefinedNotebook_t0.configure(highlightbackground="#ffffff")
        self.UserDefinedNotebook_t1 = Frame(self.UserDefinedNotebook)
        self.UserDefinedNotebook.add(self.UserDefinedNotebook_t1, padding=3)
        self.UserDefinedNotebook.tab(1, text="Telescope", compound="none"
                ,underline="-1", )
        self.UserDefinedNotebook_t1.configure(background="#ffffff")
        self.UserDefinedNotebook_t1.configure(highlightcolor="#ffffff")
        self.UserDefinedNotebook_t2 = Frame(self.UserDefinedNotebook)
        self.UserDefinedNotebook.add(self.UserDefinedNotebook_t2, padding=3)
        self.UserDefinedNotebook.tab(2, text="Camera", compound="none"
                ,underline="-1", )
        self.UserDefinedNotebook_t2.configure(background="#ffffff")
        self.UserDefinedNotebook_t3 = Frame(self.UserDefinedNotebook)
        self.UserDefinedNotebook.add(self.UserDefinedNotebook_t3, padding=3)
        self.UserDefinedNotebook.tab(3, text="Advanced", compound="none"
                ,underline="-1", )
        self.UserDefinedNotebook_t3.configure(background="#ffffff")

        self.UniverseFrame = Frame(self.UserDefinedNotebook_t0)
        self.UniverseFrame.place(relx=0.0, rely=0.0, relheight=1.01
                , relwidth=1.0)
        self.UniverseFrame.configure(relief=GROOVE)
        self.UniverseFrame.configure(borderwidth="2")
        self.UniverseFrame.configure(relief=GROOVE)
        self.UniverseFrame.configure(background="#ffffff")
        self.UniverseFrame.configure(width=775)

        self.UseExistaingCatButton = Checkbutton(self.UniverseFrame)
        self.UseExistaingCatButton.place(relx=0.01, rely=0.13, relheight=0.07
                , relwidth=0.26)
        self.UseExistaingCatButton.configure(activebackground="#ffffff")
        self.UseExistaingCatButton.configure(anchor=NW)
        self.UseExistaingCatButton.configure(background="#ffffff")
        self.UseExistaingCatButton.configure(highlightthickness="0")
        self.UseExistaingCatButton.configure(justify=LEFT)
        self.UseExistaingCatButton.configure(text='''Use An Existing Catalog''')
        self.UseExistaingCatButton.configure(variable=phosim_gui_support.UseExistingCat)

        self.ExistCatScrolledEntry = ScrolledEntry(self.UniverseFrame)
        self.ExistCatScrolledEntry.place(relx=0.31, rely=0.13, height=33
                , relwidth=0.58)
        self.ExistCatScrolledEntry.configure(background="white")
        self.ExistCatScrolledEntry.configure(font=font9)
        self.ExistCatScrolledEntry.configure(highlightbackground="#ffffff")
        self.ExistCatScrolledEntry.configure(insertborderwidth="1")
        self.ExistCatScrolledEntry.configure(selectbackground="#c4c4c4")
        self.ExistCatScrolledEntry.configure(textvariable=phosim_gui_support.CatalogFileName)
        self.ExistCatScrolledEntry.configure(width=15)

        self.Label2 = Label(self.UniverseFrame)
        self.Label2.place(relx=0.48, rely=0.07, height=19, width=172)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(text='''Catalog File Name''')

        self.StarsCheckButton = Checkbutton(self.UniverseFrame)
        self.StarsCheckButton.place(relx=0.01, rely=0.33, relheight=0.07
                , relwidth=0.22)
        self.StarsCheckButton.configure(activebackground="#ffffff")
        self.StarsCheckButton.configure(anchor=W)
        self.StarsCheckButton.configure(background="#ffffff")
        self.StarsCheckButton.configure(highlightthickness="0")
        self.StarsCheckButton.configure(justify=LEFT)
        self.StarsCheckButton.configure(text='''Generate Star Catalog''')
        self.StarsCheckButton.configure(variable=phosim_gui_support.GenerateStarCat)
        self.StarsCheckButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SelectGenStarsCat())

        self.Label3 = Label(self.UniverseFrame)
        self.Label3.place(relx=0.32, rely=0.34, height=19, width=67)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor=E)
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(justify=RIGHT)
        self.Label3.configure(text='''Range:''')

        self.StarMinMagEntry = Entry(self.UniverseFrame)
        self.StarMinMagEntry.place(relx=0.42, rely=0.33, height=26
                , relwidth=0.06)
        self.StarMinMagEntry.configure(background="white")
        self.StarMinMagEntry.configure(justify=RIGHT)
        self.StarMinMagEntry.configure(selectbackground="#c4c4c4")
        self.StarMinMagEntry.configure(textvariable=phosim_gui_support.StarMinimumM)
        self.StarMinMagEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.StarMinMChange())

        self.Label4 = Label(self.UniverseFrame)
        self.Label4.place(relx=0.48, rely=0.34, height=19, width=54)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(anchor=W)
        self.Label4.configure(background="#ffffff")
        self.Label4.configure(text='''M    to''')

        self.StarMaxMagEntry = Entry(self.UniverseFrame)
        self.StarMaxMagEntry.place(relx=0.56, rely=0.33, height=26
                , relwidth=0.06)
        self.StarMaxMagEntry.configure(background="white")
        self.StarMaxMagEntry.configure(justify=RIGHT)
        self.StarMaxMagEntry.configure(selectbackground="#c4c4c4")
        self.StarMaxMagEntry.configure(textvariable=phosim_gui_support.StarMaximumM)
        self.StarMaxMagEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.StarMaxMChange())

        self.Label6 = Label(self.UniverseFrame)
        self.Label6.place(relx=0.62, rely=0.34, height=19, width=26)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(anchor=W)
        self.Label6.configure(background="#ffffff")
        self.Label6.configure(text='''M''')

        self.Label8 = Label(self.UniverseFrame)
        self.Label8.place(relx=0.7, rely=0.34, height=19, width=81)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(anchor=E)
        self.Label8.configure(background="#ffffff")
        self.Label8.configure(justify=RIGHT)
        self.Label8.configure(text='''FOV Dia.:''')

        self.StarDiameterFOVEntry = Entry(self.UniverseFrame)
        self.StarDiameterFOVEntry.place(relx=0.83, rely=0.33, height=26
                , relwidth=0.1)
        self.StarDiameterFOVEntry.configure(background="white")
        self.StarDiameterFOVEntry.configure(justify=RIGHT)
        self.StarDiameterFOVEntry.configure(selectbackground="#c4c4c4")
        self.StarDiameterFOVEntry.configure(textvariable=phosim_gui_support.StarFOVDeg)
        self.StarDiameterFOVEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.StarFOVChange())

        self.Label15 = Label(self.UniverseFrame)
        self.Label15.place(relx=0.93, rely=0.34, height=19, width=27)
        self.Label15.configure(activebackground="#f9f9f9")
        self.Label15.configure(anchor=W)
        self.Label15.configure(background="#ffffff")
        self.Label15.configure(text='''deg''')

        self.StarGridCheckbutton = Checkbutton(self.UniverseFrame)
        self.StarGridCheckbutton.place(relx=0.01, rely=0.45, relheight=0.07
                , relwidth=0.25)
        self.StarGridCheckbutton.configure(activebackground="#ffffff")
        self.StarGridCheckbutton.configure(anchor=W)
        self.StarGridCheckbutton.configure(background="#ffffff")
        self.StarGridCheckbutton.configure(highlightthickness="0")
        self.StarGridCheckbutton.configure(justify=LEFT)
        self.StarGridCheckbutton.configure(text='''Generate Star Grid Catalog''')
        self.StarGridCheckbutton.configure(variable=phosim_gui_support.GenerateStarGridCat)
        self.StarGridCheckbutton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SelectGenStarGridCat())

        self.GalaxiesCheckbutton = Checkbutton(self.UniverseFrame)
        self.GalaxiesCheckbutton.place(relx=0.01, rely=0.58, relheight=0.07
                , relwidth=0.23)
        self.GalaxiesCheckbutton.configure(activebackground="#ffffff")
        self.GalaxiesCheckbutton.configure(anchor=W)
        self.GalaxiesCheckbutton.configure(background="#ffffff")
        self.GalaxiesCheckbutton.configure(highlightthickness="0")
        self.GalaxiesCheckbutton.configure(justify=LEFT)
        self.GalaxiesCheckbutton.configure(state=ACTIVE)
        self.GalaxiesCheckbutton.configure(text='''Generate Galaxy Catalog''')
        self.GalaxiesCheckbutton.configure(variable=phosim_gui_support.GenerateGalaxyCat)
        self.GalaxiesCheckbutton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SelectGenGalaxiesCat())

        self.Label22 = Label(self.UniverseFrame)
        self.Label22.place(relx=0.07, rely=0.8, height=19, width=136)
        self.Label22.configure(activebackground="#f9f9f9")
        self.Label22.configure(anchor=E)
        self.Label22.configure(background="#ffffff")
        self.Label22.configure(text='''Background:''')

        self.NoBckGrdCheckButton = Checkbutton(self.UniverseFrame)
        self.NoBckGrdCheckButton.place(relx=0.28, rely=0.79, relheight=0.07
                , relwidth=0.18)
        self.NoBckGrdCheckButton.configure(activebackground="#ffffff")
        self.NoBckGrdCheckButton.configure(anchor=W)
        self.NoBckGrdCheckButton.configure(background="#ffffff")
        self.NoBckGrdCheckButton.configure(highlightthickness="0")
        self.NoBckGrdCheckButton.configure(state=ACTIVE)
        self.NoBckGrdCheckButton.configure(text='''No Background''')
        self.NoBckGrdCheckButton.configure(variable=phosim_gui_support.NoBckGrd)
        self.NoBckGrdCheckButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SetBckGrdChkButtons("No"))

        self.QuickBckGrdCheckButton = Checkbutton(self.UniverseFrame)
        self.QuickBckGrdCheckButton.place(relx=0.48, rely=0.79, relheight=0.07
                , relwidth=0.19)
        self.QuickBckGrdCheckButton.configure(activebackground="#ffffff")
        self.QuickBckGrdCheckButton.configure(anchor=W)
        self.QuickBckGrdCheckButton.configure(background="#ffffff")
        self.QuickBckGrdCheckButton.configure(highlightthickness="0")
        self.QuickBckGrdCheckButton.configure(text='''Quick Background''')
        self.QuickBckGrdCheckButton.configure(variable=phosim_gui_support.QuickBckGrd)
        self.QuickBckGrdCheckButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SetBckGrdChkButtons("Quick"))

        self.NormalBckGrdCheckButton = Checkbutton(self.UniverseFrame)
        self.NormalBckGrdCheckButton.place(relx=0.68, rely=0.79, relheight=0.07
                , relwidth=0.24)
        self.NormalBckGrdCheckButton.configure(activebackground="#ffffff")
        self.NormalBckGrdCheckButton.configure(anchor=W)
        self.NormalBckGrdCheckButton.configure(background="#ffffff")
        self.NormalBckGrdCheckButton.configure(highlightthickness="0")
        self.NormalBckGrdCheckButton.configure(text='''Normal Background''')
        self.NormalBckGrdCheckButton.configure(variable=phosim_gui_support.NormalBckGrd)
        self.NormalBckGrdCheckButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SetBckGrdChkButtons("Normal"))

        self.GridSpacingLabel1 = Label(self.UniverseFrame)
        self.GridSpacingLabel1.place(relx=0.32, rely=0.46, height=19, width=66)
        self.GridSpacingLabel1.configure(activebackground="#f9f9f9")
        self.GridSpacingLabel1.configure(anchor=E)
        self.GridSpacingLabel1.configure(background="#ffffff")
        self.GridSpacingLabel1.configure(justify=RIGHT)
        self.GridSpacingLabel1.configure(text='''Spacing:''')

        self.Label10 = Label(self.UniverseFrame)
        self.Label10.place(relx=0.33, rely=0.58, height=19, width=57)
        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(anchor=E)
        self.Label10.configure(background="#ffffff")
        self.Label10.configure(justify=RIGHT)
        self.Label10.configure(text='''Range:''')

        self.GridSpacingEntry = Entry(self.UniverseFrame)
        self.GridSpacingEntry.place(relx=0.42, rely=0.45, height=26
                , relwidth=0.09)
        self.GridSpacingEntry.configure(background="white")
        self.GridSpacingEntry.configure(justify=RIGHT)
        self.GridSpacingEntry.configure(selectbackground="#c4c4c4")
        self.GridSpacingEntry.configure(textvariable=phosim_gui_support.StarGridSpacingDeg)
        self.GridSpacingEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.StarGridSpacingChange())

        self.Label17 = Label(self.UniverseFrame)
        self.Label17.place(relx=0.51, rely=0.46, height=19, width=28)
        self.Label17.configure(activebackground="#f9f9f9")
        self.Label17.configure(anchor=W)
        self.Label17.configure(background="#ffffff")
        self.Label17.configure(justify=LEFT)
        self.Label17.configure(text='''deg''')

        self.Label20 = Label(self.UniverseFrame)
        self.Label20.place(relx=0.59, rely=0.46, height=19, width=42)
        self.Label20.configure(activebackground="#f9f9f9")
        self.Label20.configure(anchor=E)
        self.Label20.configure(background="#ffffff")
        self.Label20.configure(text='''Width:''')

        self.StarGridMagEntry = Entry(self.UniverseFrame)
        self.StarGridMagEntry.place(relx=0.83, rely=0.45, height=26
                , relwidth=0.06)
        self.StarGridMagEntry.configure(background="white")
        self.StarGridMagEntry.configure(justify=RIGHT)
        self.StarGridMagEntry.configure(selectbackground="#c4c4c4")
        self.StarGridMagEntry.configure(textvariable=phosim_gui_support.StarGridMagnitude)
        self.StarGridMagEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.StarGridMChange())

        self.Label18 = Label(self.UniverseFrame)
        self.Label18.place(relx=0.75, rely=0.46, height=19, width=28)
        self.Label18.configure(activebackground="#f9f9f9")
        self.Label18.configure(anchor=W)
        self.Label18.configure(background="#ffffff")
        self.Label18.configure(text='''deg''')

        self.StarGridWidthEntry = Entry(self.UniverseFrame)
        self.StarGridWidthEntry.place(relx=0.66, rely=0.45, height=26
                , relwidth=0.09)
        self.StarGridWidthEntry.configure(background="white")
        self.StarGridWidthEntry.configure(justify=RIGHT)
        self.StarGridWidthEntry.configure(selectbackground="#c4c4c4")
        self.StarGridWidthEntry.configure(textvariable=phosim_gui_support.StarGridWidthDeg)
        self.StarGridWidthEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.StarGridWidthChange())

        self.Label9 = Label(self.UniverseFrame)
        self.Label9.place(relx=0.89, rely=0.46, height=19, width=24)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(anchor=W)
        self.Label9.configure(background="#ffffff")
        self.Label9.configure(justify=LEFT)
        self.Label9.configure(text='''M''')

        self.GalaxyMinMagEntry = Entry(self.UniverseFrame)
        self.GalaxyMinMagEntry.place(relx=0.42, rely=0.57, height=26
                , relwidth=0.06)
        self.GalaxyMinMagEntry.configure(background="white")
        self.GalaxyMinMagEntry.configure(justify=RIGHT)
        self.GalaxyMinMagEntry.configure(selectbackground="#c4c4c4")
        self.GalaxyMinMagEntry.configure(textvariable=phosim_gui_support.GalaxyMinimumM)
        self.GalaxyMinMagEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.GalaxyMinMChange())

        self.Label11 = Label(self.UniverseFrame)
        self.Label11.place(relx=0.48, rely=0.58, height=19, width=54)
        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(anchor=W)
        self.Label11.configure(background="#ffffff")
        self.Label11.configure(text='''M    to''')

        self.GalaxyMaxMagEntry = Entry(self.UniverseFrame)
        self.GalaxyMaxMagEntry.place(relx=0.56, rely=0.57, height=26
                , relwidth=0.06)
        self.GalaxyMaxMagEntry.configure(background="white")
        self.GalaxyMaxMagEntry.configure(justify=RIGHT)
        self.GalaxyMaxMagEntry.configure(selectbackground="#c4c4c4")
        self.GalaxyMaxMagEntry.configure(textvariable=phosim_gui_support.GalaxyMaximumM)
        self.GalaxyMaxMagEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.GalaxyMaxMChange())

        self.Label13 = Label(self.UniverseFrame)
        self.Label13.place(relx=0.62, rely=0.58, height=19, width=26)
        self.Label13.configure(activebackground="#f9f9f9")
        self.Label13.configure(anchor=W)
        self.Label13.configure(background="#ffffff")
        self.Label13.configure(justify=LEFT)
        self.Label13.configure(text='''M''')

        self.Label14 = Label(self.UniverseFrame)
        self.Label14.place(relx=0.71, rely=0.58, height=19, width=71)
        self.Label14.configure(activebackground="#f9f9f9")
        self.Label14.configure(anchor=E)
        self.Label14.configure(background="#ffffff")
        self.Label14.configure(text='''FOV Dia.:''')

        self.GalaxyFOVEntry = Entry(self.UniverseFrame)
        self.GalaxyFOVEntry.place(relx=0.83, rely=0.58,height=26, relwidth=0.1)
        self.GalaxyFOVEntry.configure(background="white")
        self.GalaxyFOVEntry.configure(justify=RIGHT)
        self.GalaxyFOVEntry.configure(selectbackground="#c4c4c4")
        self.GalaxyFOVEntry.configure(textvariable=phosim_gui_support.GalaxyFOVDeg)
        self.GalaxyFOVEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.GalaxyFOVChange())

        self.Label16 = Label(self.UniverseFrame)
        self.Label16.place(relx=0.93, rely=0.58, height=19, width=28)
        self.Label16.configure(activebackground="#f9f9f9")
        self.Label16.configure(anchor=W)
        self.Label16.configure(background="#ffffff")
        self.Label16.configure(text='''deg''')

        self.Telescopeframe = Frame(self.UserDefinedNotebook_t1)
        self.Telescopeframe.place(relx=0.0, rely=0.0, relheight=1.01
                , relwidth=1.0)
        self.Telescopeframe.configure(relief=GROOVE)
        self.Telescopeframe.configure(borderwidth="2")
        self.Telescopeframe.configure(relief=GROOVE)
        self.Telescopeframe.configure(background="#ffffff")
        self.Telescopeframe.configure(width=775)

        self.MontLabel = Label(self.Telescopeframe)
        self.MontLabel.place(relx=0.09, rely=0.07, height=18, width=70)
        self.MontLabel.configure(activebackground="#f9f9f9")
        self.MontLabel.configure(anchor=W)
        self.MontLabel.configure(background="#ffffff")
        self.MontLabel.configure(font=font10)
        self.MontLabel.configure(text='''Mount:''')

        self.AzimuthLabel = Label(self.Telescopeframe)
        self.AzimuthLabel.place(relx=0.37, rely=0.07, height=19, width=59)
        self.AzimuthLabel.configure(activebackground="#f9f9f9")
        self.AzimuthLabel.configure(anchor=E)
        self.AzimuthLabel.configure(background="#ffffff")
        self.AzimuthLabel.configure(text='''Azimuth:''')

        self.AzimuthEntryDeg = Entry(self.Telescopeframe)
        self.AzimuthEntryDeg.place(relx=0.47, rely=0.06, height=26
                , relwidth=0.12)
        self.AzimuthEntryDeg.configure(background="white")
        self.AzimuthEntryDeg.configure(justify=RIGHT)
        self.AzimuthEntryDeg.configure(selectbackground="#c4c4c4")
        self.AzimuthEntryDeg.configure(takefocus="0")
        self.AzimuthEntryDeg.configure(textvariable=phosim_gui_support.AzimuthDeg)
        self.AzimuthEntryDeg.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.AzimuthDeg))
        self.AzimuthEntryDeg.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.AzimuthDegEntryGood, phosim_gui_support.AzimuthDeg))
        self.AzimuthEntryDeg.bind('<KeyRelease>',lambda e:phosim_gui_support.AzimuthDegChange())

        self.Label33 = Label(self.Telescopeframe)
        self.Label33.place(relx=0.61, rely=0.07, height=19, width=28)
        self.Label33.configure(activebackground="#f9f9f9")
        self.Label33.configure(anchor=W)
        self.Label33.configure(background="#ffffff")
        self.Label33.configure(text='''deg''')

        self.AltitudeLabel1 = Label(self.Telescopeframe)
        self.AltitudeLabel1.place(relx=0.65, rely=0.07, height=19, width=67)
        self.AltitudeLabel1.configure(activebackground="#f9f9f9")
        self.AltitudeLabel1.configure(anchor=E)
        self.AltitudeLabel1.configure(background="#ffffff")
        self.AltitudeLabel1.configure(justify=RIGHT)
        self.AltitudeLabel1.configure(text='''Altitude:''')

        self.AltitudeEntryDeg = Entry(self.Telescopeframe)
        self.AltitudeEntryDeg.place(relx=0.75, rely=0.06, height=26
                , relwidth=0.12)
        self.AltitudeEntryDeg.configure(background="#ffffffffffff")
        self.AltitudeEntryDeg.configure(justify=RIGHT)
        self.AltitudeEntryDeg.configure(selectbackground="#c4c4c4")
        self.AltitudeEntryDeg.configure(takefocus="0")
        self.AltitudeEntryDeg.configure(textvariable=phosim_gui_support.AltitudeDeg)
        self.AltitudeEntryDeg.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.AltitudeDeg))
        self.AltitudeEntryDeg.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.AltitudeDegEntryGood, phosim_gui_support.AltitudeDeg))
        self.AltitudeEntryDeg.bind('<KeyRelease>',lambda e:phosim_gui_support.AltitudeDegChange())

        self.Label44 = Label(self.Telescopeframe)
        self.Label44.place(relx=0.89, rely=0.07, height=19, width=28)
        self.Label44.configure(activebackground="#f9f9f9")
        self.Label44.configure(anchor=W)
        self.Label44.configure(background="#ffffff")
        self.Label44.configure(text='''deg''')

        self.RightAscensionLabel = Label(self.Telescopeframe)
        self.RightAscensionLabel.place(relx=0.16, rely=0.22, height=19
                , width=123)
        self.RightAscensionLabel.configure(activebackground="#f9f9f9")
        self.RightAscensionLabel.configure(anchor=E)
        self.RightAscensionLabel.configure(background="#ffffff")
        self.RightAscensionLabel.configure(justify=RIGHT)
        self.RightAscensionLabel.configure(text='''Right Ascension:''')
        self.RightAscensionLabel.configure(width=123)

        self.RAEntryHours = Entry(self.Telescopeframe)
        self.RAEntryHours.place(relx=0.34, rely=0.21,height=26, relwidth=0.05)
        self.RAEntryHours.configure(background="white")
        self.RAEntryHours.configure(justify=RIGHT)
        self.RAEntryHours.configure(selectbackground="#c4c4c4")
        self.RAEntryHours.configure(takefocus="0")
        self.RAEntryHours.configure(textvariable=phosim_gui_support.RAHours)
        self.RAEntryHours.bind('<KeyRelease>',lambda e:phosim_gui_support.RAhmsChange())

        self.Label31 = Label(self.Telescopeframe)
        self.Label31.place(relx=0.4, rely=0.22, height=19, width=16)
        self.Label31.configure(activebackground="#f9f9f9")
        self.Label31.configure(anchor=W)
        self.Label31.configure(background="#ffffff")
        self.Label31.configure(text='''h''')

        self.RAEntryMin = Entry(self.Telescopeframe)
        self.RAEntryMin.place(relx=0.46, rely=0.21,height=26, relwidth=0.05)
        self.RAEntryMin.configure(background="white")
        self.RAEntryMin.configure(justify=RIGHT)
        self.RAEntryMin.configure(selectbackground="#c4c4c4")
        self.RAEntryMin.configure(takefocus="0")
        self.RAEntryMin.configure(textvariable=phosim_gui_support.RAMinutes)
        self.RAEntryMin.bind('<KeyRelease>',lambda e:phosim_gui_support.RAhmsChange())

        self.Label35 = Label(self.Telescopeframe)
        self.Label35.place(relx=0.52, rely=0.22, height=19, width=16)
        self.Label35.configure(activebackground="#f9f9f9")
        self.Label35.configure(anchor=W)
        self.Label35.configure(background="#ffffff")
        self.Label35.configure(text='''m''')

        self.RAEntrySec = Entry(self.Telescopeframe)
        self.RAEntrySec.place(relx=0.56, rely=0.21,height=26, relwidth=0.09)
        self.RAEntrySec.configure(background="white")
        self.RAEntrySec.configure(justify=RIGHT)
        self.RAEntrySec.configure(selectbackground="#c4c4c4")
        self.RAEntrySec.configure(takefocus="0")
        self.RAEntrySec.configure(textvariable=phosim_gui_support.RASeconds)
        self.RAEntrySec.bind('<KeyRelease>',lambda e:phosim_gui_support.RAhmsChange())

        self.Label51 = Label(self.Telescopeframe)
        self.Label51.place(relx=0.66, rely=0.22, height=19, width=16)
        self.Label51.configure(activebackground="#f9f9f9")
        self.Label51.configure(anchor=W)
        self.Label51.configure(background="#ffffff")
        self.Label51.configure(text='''s''')
        self.Label51.configure(width=16)

        self.RAEntryDeg = Entry(self.Telescopeframe)
        self.RAEntryDeg.place(relx=0.75, rely=0.21,height=26, relwidth=0.12)
        self.RAEntryDeg.configure(background="white")
        self.RAEntryDeg.configure(justify=RIGHT)
        self.RAEntryDeg.configure(selectbackground="#c4c4c4")
        self.RAEntryDeg.configure(takefocus="0")
        self.RAEntryDeg.configure(textvariable=phosim_gui_support.RADeg)
        self.RAEntryDeg.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.RADeg))
        self.RAEntryDeg.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.RAEntryGood,phosim_gui_support.RADeg))
        self.RAEntryDeg.bind('<KeyRelease>',lambda e:phosim_gui_support.RADegEntryChange())

        self.Label42 = Label(self.Telescopeframe)
        self.Label42.place(relx=0.89, rely=0.22, height=19, width=28)
        self.Label42.configure(activebackground="#f9f9f9")
        self.Label42.configure(anchor=W)
        self.Label42.configure(background="#ffffff")
        self.Label42.configure(text='''deg''')

        self.SkyLabel = Label(self.Telescopeframe)
        self.SkyLabel.place(relx=0.12, rely=0.28, height=21, width=50)
        self.SkyLabel.configure(activebackground="#f9f9f9")
        self.SkyLabel.configure(anchor=W)
        self.SkyLabel.configure(background="#ffffff")
        self.SkyLabel.configure(font=font10)
        self.SkyLabel.configure(justify=LEFT)
        self.SkyLabel.configure(text='''Sky:''')

        self.DateLabel = Label(self.Telescopeframe)
        self.DateLabel.place(relx=0.1, rely=0.49, height=19, width=51)
        self.DateLabel.configure(activebackground="#f9f9f9")
        self.DateLabel.configure(anchor=W)
        self.DateLabel.configure(background="#ffffff")
        self.DateLabel.configure(font=font10)
        self.DateLabel.configure(justify=LEFT)
        self.DateLabel.configure(text='''Date:''')

        self.DeclinationLabel = Label(self.Telescopeframe)
        self.DeclinationLabel.place(relx=0.19, rely=0.34, height=19, width=103)
        self.DeclinationLabel.configure(activebackground="#f9f9f9")
        self.DeclinationLabel.configure(anchor=E)
        self.DeclinationLabel.configure(background="#ffffff")
        self.DeclinationLabel.configure(justify=RIGHT)
        self.DeclinationLabel.configure(text='''Declination:''')
        self.DeclinationLabel.configure(width=103)

        self.MJDNowCheckButton = Checkbutton(self.Telescopeframe)
        self.MJDNowCheckButton.place(relx=0.44, rely=0.49, relheight=0.06
                , relwidth=0.08)
        self.MJDNowCheckButton.configure(activebackground="#ffffff")
        self.MJDNowCheckButton.configure(anchor=W)
        self.MJDNowCheckButton.configure(background="#ffffff")
        self.MJDNowCheckButton.configure(highlightthickness="0")
        self.MJDNowCheckButton.configure(justify=LEFT)
        self.MJDNowCheckButton.configure(text='''Now''')
        self.MJDNowCheckButton.configure(variable=phosim_gui_support.MJDNow)
        self.MJDNowCheckButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SetMJDChkButtons("Now"))

        self.DecEntryIntDegrees = Entry(self.Telescopeframe)
        self.DecEntryIntDegrees.place(relx=0.34, rely=0.33, height=26
                , relwidth=0.05)
        self.DecEntryIntDegrees.configure(background="white")
        self.DecEntryIntDegrees.configure(justify=RIGHT)
        self.DecEntryIntDegrees.configure(selectbackground="#c4c4c4")
        self.DecEntryIntDegrees.configure(takefocus="0")
        self.DecEntryIntDegrees.configure(textvariable=phosim_gui_support.DecIntDegrees)
        self.DecEntryIntDegrees.bind('<KeyRelease>',lambda e:phosim_gui_support.DecdmsChange())

        self.Label36 = Label(self.Telescopeframe)
        self.Label36.place(relx=0.4, rely=0.34, height=19, width=27)
        self.Label36.configure(activebackground="#f9f9f9")
        self.Label36.configure(anchor=W)
        self.Label36.configure(background="#ffffff")
        self.Label36.configure(text='''deg''')

        self.DecEntryMin = Entry(self.Telescopeframe)
        self.DecEntryMin.place(relx=0.46, rely=0.33,height=26, relwidth=0.05)
        self.DecEntryMin.configure(background="white")
        self.DecEntryMin.configure(justify=RIGHT)
        self.DecEntryMin.configure(selectbackground="#c4c4c4")
        self.DecEntryMin.configure(takefocus="0")
        self.DecEntryMin.configure(textvariable=phosim_gui_support.DecMinutes)
        self.DecEntryMin.bind('<KeyRelease>',lambda e:phosim_gui_support.DecdmsChange())

        self.Label37 = Label(self.Telescopeframe)
        self.Label37.place(relx=0.52, rely=0.34, height=19, width=15)
        self.Label37.configure(activebackground="#f9f9f9")
        self.Label37.configure(anchor=W)
        self.Label37.configure(background="#ffffff")
        self.Label37.configure(text='''m''')

        self.DecEntrySec = Entry(self.Telescopeframe)
        self.DecEntrySec.place(relx=0.56, rely=0.33,height=26, relwidth=0.09)
        self.DecEntrySec.configure(background="white")
        self.DecEntrySec.configure(justify=RIGHT)
        self.DecEntrySec.configure(selectbackground="#c4c4c4")
        self.DecEntrySec.configure(takefocus="0")
        self.DecEntrySec.configure(textvariable=phosim_gui_support.DecSeconds)
        self.DecEntrySec.bind('<KeyRelease>',lambda e:phosim_gui_support.DecdmsChange())

        self.Label38 = Label(self.Telescopeframe)
        self.Label38.place(relx=0.66, rely=0.34, height=19, width=16)
        self.Label38.configure(activebackground="#f9f9f9")
        self.Label38.configure(anchor=W)
        self.Label38.configure(background="#ffffff")
        self.Label38.configure(text='''s''')
        self.Label38.configure(width=16)

        self.Label41 = Label(self.Telescopeframe)
        self.Label41.place(relx=0.7, rely=0.25, height=19, width=16)
        self.Label41.configure(activebackground="#f9f9f9")
        self.Label41.configure(anchor=W)
        self.Label41.configure(background="#ffffff")
        self.Label41.configure(text='''or''')

        self.DecEntryDeg = Entry(self.Telescopeframe)
        self.DecEntryDeg.place(relx=0.75, rely=0.33,height=26, relwidth=0.12)
        self.DecEntryDeg.configure(background="white")
        self.DecEntryDeg.configure(justify=RIGHT)
        self.DecEntryDeg.configure(selectbackground="#c4c4c4")
        self.DecEntryDeg.configure(takefocus="0")
        self.DecEntryDeg.configure(textvariable=phosim_gui_support.DecDeg)
        self.DecEntryDeg.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.DecDeg))
        self.DecEntryDeg.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.DecEntryGood, phosim_gui_support.DecDeg))
        self.DecEntryDeg.bind('<KeyRelease>',lambda e:phosim_gui_support.DecDegEntryChange())

        self.Label43 = Label(self.Telescopeframe)
        self.Label43.place(relx=0.89, rely=0.34, height=19, width=48)
        self.Label43.configure(activebackground="#f9f9f9")
        self.Label43.configure(anchor=W)
        self.Label43.configure(background="#ffffff")
        self.Label43.configure(text='''deg''')

        self.MJDTonightCheckButton = Checkbutton(self.Telescopeframe)
        self.MJDTonightCheckButton.place(relx=0.55, rely=0.48, relheight=0.08
                , relwidth=0.1)
        self.MJDTonightCheckButton.configure(activebackground="#ffffff")
        self.MJDTonightCheckButton.configure(anchor=W)
        self.MJDTonightCheckButton.configure(background="#ffffff")
        self.MJDTonightCheckButton.configure(highlightthickness="0")
        self.MJDTonightCheckButton.configure(justify=LEFT)
        self.MJDTonightCheckButton.configure(text='''Tonight''')
        self.MJDTonightCheckButton.configure(variable=phosim_gui_support.MJDTonight)
        self.MJDTonightCheckButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SetMJDChkButtons("Tonight"))

        self.Label19 = Label(self.Telescopeframe)
        self.Label19.place(relx=0.89, rely=0.49, height=19, width=33)
        self.Label19.configure(activebackground="#f9f9f9")
        self.Label19.configure(anchor=W)
        self.Label19.configure(background="#ffffff")
        self.Label19.configure(text='''MJD''')

        self.MJDEntry = Entry(self.Telescopeframe)
        self.MJDEntry.place(relx=0.75, rely=0.48,height=26, relwidth=0.12)
        self.MJDEntry.configure(background="white")
        self.MJDEntry.configure(justify=RIGHT)
        self.MJDEntry.configure(selectbackground="#c4c4c4")
        self.MJDEntry.configure(takefocus="0")
        self.MJDEntry.configure(textvariable=phosim_gui_support.mjdDateDays)
        self.MJDEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.mjdDateDays))
        self.MJDEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.MJDEntryGood, phosim_gui_support.mjdDateDays))
        self.MJDEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.MJDChange())

        self.Label45 = Label(self.Telescopeframe)
        self.Label45.place(relx=0.7, rely=0.49, height=19, width=16)
        self.Label45.configure(activebackground="#f9f9f9")
        self.Label45.configure(anchor=W)
        self.Label45.configure(background="#ffffff")
        self.Label45.configure(text='''or''')

        self.Label46 = Label(self.Telescopeframe)
        self.Label46.place(relx=0.53, rely=0.49, height=19, width=16)
        self.Label46.configure(activebackground="#f9f9f9")
        self.Label46.configure(anchor=W)
        self.Label46.configure(background="#ffffff")
        self.Label46.configure(text='''or''')

        self.MJDRandomNightCheckButton = Checkbutton(self.Telescopeframe)
        self.MJDRandomNightCheckButton.place(relx=0.25, rely=0.49, relheight=0.06
                , relwidth=0.16)
        self.MJDRandomNightCheckButton.configure(activebackground="#ffffff")
        self.MJDRandomNightCheckButton.configure(anchor=W)
        self.MJDRandomNightCheckButton.configure(background="#ffffff")
        self.MJDRandomNightCheckButton.configure(highlightthickness="0")
        self.MJDRandomNightCheckButton.configure(justify=LEFT)
        self.MJDRandomNightCheckButton.configure(text='''Random Night''')
        self.MJDRandomNightCheckButton.configure(variable=phosim_gui_support.MJDRandomNight)
        self.MJDRandomNightCheckButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SetMJDChkButtons("RandomNight"))

        self.Label47 = Label(self.Telescopeframe)
        self.Label47.place(relx=0.4, rely=0.49, height=19, width=26)
        self.Label47.configure(activebackground="#f9f9f9")
        self.Label47.configure(anchor=W)
        self.Label47.configure(background="#ffffff")
        self.Label47.configure(text='''or''')

        self.TelescopeConfigurationLabel = Label(self.Telescopeframe)
        self.TelescopeConfigurationLabel.place(relx=0.05, rely=0.7, height=18
                , width=200)
        self.TelescopeConfigurationLabel.configure(activebackground="#f9f9f9")
        self.TelescopeConfigurationLabel.configure(anchor=W)
        self.TelescopeConfigurationLabel.configure(background="#ffffff")
        self.TelescopeConfigurationLabel.configure(font=font10)
        self.TelescopeConfigurationLabel.configure(text='''Telescope Configuration''')

        self.DomeOpenLightOffbutton = Radiobutton(self.Telescopeframe)
        self.DomeOpenLightOffbutton.place(relx=0.03, rely=0.76, relheight=0.06
                , relwidth=0.26)
        self.DomeOpenLightOffbutton.configure(activebackground="#ffffff")
        self.DomeOpenLightOffbutton.configure(anchor=W)
        self.DomeOpenLightOffbutton.configure(background="#ffffff")
        self.DomeOpenLightOffbutton.configure(highlightbackground="#ffffff")
        self.DomeOpenLightOffbutton.configure(justify=LEFT)
        self.DomeOpenLightOffbutton.configure(takefocus="0")
        self.DomeOpenLightOffbutton.configure(text='''Dome Open/Dome Light Off''')
        self.DomeOpenLightOffbutton.configure(value="0")
        self.DomeOpenLightOffbutton.configure(variable=phosim_gui_support.TelescopeConfig)

        self.DomeClosedLightOffButton = Radiobutton(self.Telescopeframe)
        self.DomeClosedLightOffButton.place(relx=0.03, rely=0.82, relheight=0.06
                , relwidth=0.27)
        self.DomeClosedLightOffButton.configure(activebackground="#ffffff")
        self.DomeClosedLightOffButton.configure(anchor=W)
        self.DomeClosedLightOffButton.configure(background="#ffffff")
        self.DomeClosedLightOffButton.configure(highlightbackground="#ffffff")
        self.DomeClosedLightOffButton.configure(justify=LEFT)
        self.DomeClosedLightOffButton.configure(takefocus="0")
        self.DomeClosedLightOffButton.configure(text='''Dome Closed/Dome Light Off''')
        self.DomeClosedLightOffButton.configure(value="1")
        self.DomeClosedLightOffButton.configure(variable=phosim_gui_support.TelescopeConfig)

        self.DomeClosedLightOnButton = Radiobutton(self.Telescopeframe)
        self.DomeClosedLightOnButton.place(relx=0.03, rely=0.88, relheight=0.06
                , relwidth=0.27)
        self.DomeClosedLightOnButton.configure(activebackground="#ffffff")
        self.DomeClosedLightOnButton.configure(anchor=W)
        self.DomeClosedLightOnButton.configure(background="#ffffff")
        self.DomeClosedLightOnButton.configure(highlightbackground="#ffffff")
        self.DomeClosedLightOnButton.configure(justify=LEFT)
        self.DomeClosedLightOnButton.configure(takefocus="0")
        self.DomeClosedLightOnButton.configure(text='''Dome Closed/Dome Light On''')
        self.DomeClosedLightOnButton.configure(value="2")
        self.DomeClosedLightOnButton.configure(variable=phosim_gui_support.TelescopeConfig)

        self.DomeLightSpecificationeLabel = Label(self.Telescopeframe)
        self.DomeLightSpecificationeLabel.place(relx=0.41, rely=0.7, height=18
                , width=150)
        self.DomeLightSpecificationeLabel.configure(activebackground="#f9f9f9")
        self.DomeLightSpecificationeLabel.configure(anchor=W)
        self.DomeLightSpecificationeLabel.configure(background="#ffffff")
        self.DomeLightSpecificationeLabel.configure(font=font10)
        self.DomeLightSpecificationeLabel.configure(text='''Dome Light (If ON)''')

        self.DomeLightIntensityLabel = Label(self.Telescopeframe)
        self.DomeLightIntensityLabel.place(relx=0.34, rely=0.79, height=19
                , width=63)
        self.DomeLightIntensityLabel.configure(activebackground="#f9f9f9")
        self.DomeLightIntensityLabel.configure(anchor=E)
        self.DomeLightIntensityLabel.configure(background="#ffffff")
        self.DomeLightIntensityLabel.configure(justify=RIGHT)
        self.DomeLightIntensityLabel.configure(text='''Intensity:''')
        self.DomeLightIntensityLabel.configure(width=63)

        self.DomeLightIntensityEntry = Entry(self.Telescopeframe)
        self.DomeLightIntensityEntry.place(relx=0.44, rely=0.78, height=26
                , relwidth=0.12)
        self.DomeLightIntensityEntry.configure(background="white")
        self.DomeLightIntensityEntry.configure(justify=RIGHT)
        self.DomeLightIntensityEntry.configure(selectbackground="#c4c4c4")
        self.DomeLightIntensityEntry.configure(takefocus="0")
        self.DomeLightIntensityEntry.configure(textvariable=phosim_gui_support.DomeLightIntensity)
        self.DomeLightIntensityEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.DomeLightIntensity))
        self.DomeLightIntensityEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.DomeLightIntensityGood, phosim_gui_support.DomeLightIntensity))
        self.DomeLightIntensityEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.DomeLightIntensityChange())

        self.DomeLightIntensityUnits = Label(self.Telescopeframe)
        self.DomeLightIntensityUnits.place(relx=0.58, rely=0.79, height=19
                , width=106)
        self.DomeLightIntensityUnits.configure(activebackground="#f9f9f9")
        self.DomeLightIntensityUnits.configure(anchor=W)
        self.DomeLightIntensityUnits.configure(background="#ffffff")
        self.DomeLightIntensityUnits.configure(text='''Mag/arcSec^2''')

        self.DomeLightWavelengthLabel = Label(self.Telescopeframe)
        self.DomeLightWavelengthLabel.place(relx=0.3, rely=0.88, height=19
                , width=93)
        self.DomeLightWavelengthLabel.configure(activebackground="#f9f9f9")
        self.DomeLightWavelengthLabel.configure(anchor=E)
        self.DomeLightWavelengthLabel.configure(background="#ffffff")
        self.DomeLightWavelengthLabel.configure(justify=RIGHT)
        self.DomeLightWavelengthLabel.configure(text='''WaveLength:''')
        self.DomeLightWavelengthLabel.configure(width=93)

        self.DomeLightWavelengthEntry = Entry(self.Telescopeframe)
        self.DomeLightWavelengthEntry.place(relx=0.44, rely=0.87, height=26
                , relwidth=0.12)
        self.DomeLightWavelengthEntry.configure(background="white")
        self.DomeLightWavelengthEntry.configure(justify=RIGHT)
        self.DomeLightWavelengthEntry.configure(selectbackground="#c4c4c4")
        self.DomeLightWavelengthEntry.configure(takefocus="0")
        self.DomeLightWavelengthEntry.configure(textvariable=phosim_gui_support.DomeLightWavelength)
        self.DomeLightWavelengthEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.DomeLightWavelength))
        self.DomeLightWavelengthEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.DomeLightWavelengthGood, phosim_gui_support.DomeLightWavelength))
        self.DomeLightWavelengthEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.DomeLightWavelengthChange())

        self.DomeLightWavelengthUnits = Label(self.Telescopeframe)
        self.DomeLightWavelengthUnits.place(relx=0.58, rely=0.88, height=19
                , width=106)
        self.DomeLightWavelengthUnits.configure(activebackground="#f9f9f9")
        self.DomeLightWavelengthUnits.configure(anchor=W)
        self.DomeLightWavelengthUnits.configure(background="#ffffff")
        self.DomeLightWavelengthUnits.configure(text='''nm: 0->flat SED''')

        self.TelPosAngleLabel = Label(self.Telescopeframe)
        self.TelPosAngleLabel.place(relx=0.74, rely=0.7, height=18, width=150)
        self.TelPosAngleLabel.configure(activebackground="#f9f9f9")
        self.TelPosAngleLabel.configure(anchor=W)
        self.TelPosAngleLabel.configure(background="#ffffff")
        self.TelPosAngleLabel.configure(font=font10)
        self.TelPosAngleLabel.configure(text='''Telescope Rotation''')

        self.RotTelPosEntry = Entry(self.Telescopeframe)
        self.RotTelPosEntry.place(relx=0.76, rely=0.78, height=26, relwidth=0.12)

        self.RotTelPosEntry.configure(background="white")
        self.RotTelPosEntry.configure(justify=RIGHT)
        self.RotTelPosEntry.configure(selectbackground="white")
        self.RotTelPosEntry.configure(takefocus="0")
        self.RotTelPosEntry.configure(textvariable=phosim_gui_support.RotTelPos)
        self.RotTelPosEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.RotTelPos))
        self.RotTelPosEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.RotTelPosEntryGood, phosim_gui_support.RotTelPos))
        self.RotTelPosEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.RotTelPosChange())

        self.TelRotUnitsLabel = Label(self.Telescopeframe)
        self.TelRotUnitsLabel.place(relx=0.9, rely=0.79, height=19, width=36)
        self.TelRotUnitsLabel.configure(activebackground="#f9f9f9")
        self.TelRotUnitsLabel.configure(anchor=W)
        self.TelRotUnitsLabel.configure(background="#ffffff")
        self.TelRotUnitsLabel.configure(text='''deg''')

        self.CameraFrame = Frame(self.UserDefinedNotebook_t2)
        self.CameraFrame.place(relx=0.0, rely=0.0, relheight=1.01, relwidth=1.0)
        self.CameraFrame.configure(relief=GROOVE)
        self.CameraFrame.configure(borderwidth="2")
        self.CameraFrame.configure(relief=GROOVE)
        self.CameraFrame.configure(background="#ffffff")
        self.CameraFrame.configure(width=775)

        self.NumExposuresLable = Label(self.CameraFrame)
        self.NumExposuresLable.place(relx=0.01, rely=0.1, height=19, width=159)
        self.NumExposuresLable.configure(activebackground="#f9f9f9")
        self.NumExposuresLable.configure(anchor=E)
        self.NumExposuresLable.configure(background="#ffffff")
        self.NumExposuresLable.configure(justify=RIGHT)
        self.NumExposuresLable.configure(text='''Number of Exposures:''')

        self.NSnapEntry = Entry(self.CameraFrame)
        self.NSnapEntry.place(relx=0.22, rely=0.09,height=26, relwidth=0.06)
        self.NSnapEntry.configure(background="white")
        self.NSnapEntry.configure(justify=RIGHT)
        self.NSnapEntry.configure(selectbackground="white")
        self.NSnapEntry.configure(takefocus="0")
        self.NSnapEntry.configure(textvariable=phosim_gui_support.nSnap)
        self.NSnapEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.NumExpChange())

        self.ExposureTimeLabel = Label(self.CameraFrame)
        self.ExposureTimeLabel.place(relx=0.1, rely=0.19, height=19, width=88)
        self.ExposureTimeLabel.configure(activebackground="#f9f9f9")
        self.ExposureTimeLabel.configure(anchor=E)
        self.ExposureTimeLabel.configure(background="#ffffff")
        self.ExposureTimeLabel.configure(justify=RIGHT)
        self.ExposureTimeLabel.configure(text='''Visit Time:''')

        self.VistimeEntry = Entry(self.CameraFrame)
        self.VistimeEntry.place(relx=0.22, rely=0.18,height=26, relwidth=0.12)
        self.VistimeEntry.configure(background="white")
        self.VistimeEntry.configure(justify=RIGHT)
        self.VistimeEntry.configure(selectbackground="white")
        self.VistimeEntry.configure(takefocus="0")
        self.VistimeEntry.configure(textvariable=phosim_gui_support.vistime)
        self.VistimeEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.VisitTimeChange())

        self.EXPTimeUnitsLabel = Label(self.CameraFrame)
        self.EXPTimeUnitsLabel.place(relx=0.35, rely=0.19, height=19, width=26)
        self.EXPTimeUnitsLabel.configure(activebackground="#f9f9f9")
        self.EXPTimeUnitsLabel.configure(anchor=W)
        self.EXPTimeUnitsLabel.configure(background="#ffffff")
        self.EXPTimeUnitsLabel.configure(text='''sec''')

        self.CameraSkipStepFrame = Frame(self.CameraFrame)
        self.CameraSkipStepFrame.place(relx=0.01, rely=0.61, relheight=0.32
                , relwidth=0.32)
        self.CameraSkipStepFrame.configure(relief=GROOVE)
        self.CameraSkipStepFrame.configure(borderwidth="2")
        self.CameraSkipStepFrame.configure(relief=GROOVE)
        self.CameraSkipStepFrame.configure(background="#ffffff")
        self.CameraSkipStepFrame.configure(width=245)

        self.NSkipEntry = Entry(self.CameraSkipStepFrame)
        self.NSkipEntry.place(relx=0.57, rely=0.37,height=26, relwidth=0.39)
        self.NSkipEntry.configure(background="white")
        self.NSkipEntry.configure(justify=RIGHT)
        self.NSkipEntry.configure(selectbackground="#c4c4c4")
        self.NSkipEntry.configure(takefocus="0")
        self.NSkipEntry.configure(textvariable=phosim_gui_support.nSkip)
        self.NSkipEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.nSkip))
        self.NSkipEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.NSkipEntryGood, phosim_gui_support.nSkip))
        self.NSkipEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.NSkipChange())

        self.NumberOfFramesLabel = Label(self.CameraSkipStepFrame)
        self.NumberOfFramesLabel.place(relx=0.0, rely=0.68, height=19, width=126)

        self.NumberOfFramesLabel.configure(activebackground="#f9f9f9")
        self.NumberOfFramesLabel.configure(anchor=E)
        self.NumberOfFramesLabel.configure(background="#ffffff")
        self.NumberOfFramesLabel.configure(justify=RIGHT)
        self.NumberOfFramesLabel.configure(text='''Number of Frames:''')

        self.NFramesEntry = Entry(self.CameraSkipStepFrame)
        self.NFramesEntry.place(relx=0.57, rely=0.66,height=26, relwidth=0.39)
        self.NFramesEntry.configure(background="white")
        self.NFramesEntry.configure(justify=RIGHT)
        self.NFramesEntry.configure(selectbackground="#c4c4c4")
        self.NFramesEntry.configure(takefocus="0")
        self.NFramesEntry.configure(textvariable=phosim_gui_support.nFrames)
        self.NFramesEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.nFrames))
        self.NFramesEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.NFramesEntryGood, phosim_gui_support.nFrames))
        self.NFramesEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.NumFramesChange())

        self.CMOSLabel = Label(self.CameraSkipStepFrame)
        self.CMOSLabel.place(relx=0.24, rely=0.1, height=19, width=116)
        self.CMOSLabel.configure(activebackground="#f9f9f9")
        self.CMOSLabel.configure(background="#ffffff")
        self.CMOSLabel.configure(text='''CMOS Options''')

        self.NskipLabel = Label(self.CameraSkipStepFrame)
        self.NskipLabel.place(relx=0.1, rely=0.41, height=19, width=106)
        self.NskipLabel.configure(activebackground="#f9f9f9")
        self.NskipLabel.configure(anchor=E)
        self.NskipLabel.configure(background="#ffffff")
        self.NskipLabel.configure(justify=RIGHT)
        self.NskipLabel.configure(text='''Number to Skip:''')

        self.ScrolledSensorListBox = ScrolledListBox(self.CameraFrame)
        self.ScrolledSensorListBox.place(relx=0.63, rely=0.12, relheight=0.4
                , relwidth=0.17)
        self.ScrolledSensorListBox.configure(background="white")
        self.ScrolledSensorListBox.configure(exportselection="0")
        self.ScrolledSensorListBox.configure(font="TkTextFont")
        self.ScrolledSensorListBox.configure(highlightcolor="#ffffff")
        self.ScrolledSensorListBox.configure(selectbackground="#c4c4c4")
        self.ScrolledSensorListBox.configure(selectmode=MULTIPLE)
        self.ScrolledSensorListBox.configure(width=10)
        self.ScrolledSensorListBox.configure(listvariable=phosim_gui_support.sensorList)

        self.LSSTSensorConfigurationFrame = Frame(self.CameraFrame)
        self.LSSTSensorConfigurationFrame.place(relx=0.35, rely=0.6
                , relheight=0.32, relwidth=0.3)
        self.LSSTSensorConfigurationFrame.configure(relief=GROOVE)
        self.LSSTSensorConfigurationFrame.configure(borderwidth="2")
        self.LSSTSensorConfigurationFrame.configure(relief=GROOVE)
        self.LSSTSensorConfigurationFrame.configure(background="#ffffff")
        self.LSSTSensorConfigurationFrame.configure(width=205)

        self.CameraConfiguratrionLabel = Label(self.LSSTSensorConfigurationFrame)
        self.CameraConfiguratrionLabel.place(relx=0.21, rely=0.1, height=19
                , width=146)
        self.CameraConfiguratrionLabel.configure(activebackground="#f9f9f9")
        self.CameraConfiguratrionLabel.configure(background="#ffffff")
        self.CameraConfiguratrionLabel.configure(text='''Camera Configuration''')

        self.LSSTScienceSensorsCheckButton = Checkbutton(self.LSSTSensorConfigurationFrame)
        self.LSSTScienceSensorsCheckButton.place(relx=0.17, rely=0.27
                , relheight=0.23, relwidth=0.67)
        self.LSSTScienceSensorsCheckButton.configure(activebackground="#ffffff")
        self.LSSTScienceSensorsCheckButton.configure(anchor=W)
        self.LSSTScienceSensorsCheckButton.configure(background="#ffffff")
        self.LSSTScienceSensorsCheckButton.configure(highlightthickness="0")
        self.LSSTScienceSensorsCheckButton.configure(justify=LEFT)
        self.LSSTScienceSensorsCheckButton.configure(takefocus="0")
        self.LSSTScienceSensorsCheckButton.configure(text='''Science Sensors On''')
        self.LSSTScienceSensorsCheckButton.configure(variable=phosim_gui_support.LSSTScienceSensors)

        self.LSSTWavefrontSensorsCheckButton = Checkbutton(self.LSSTSensorConfigurationFrame)
        self.LSSTWavefrontSensorsCheckButton.place(relx=0.17, rely=0.48
                , relheight=0.23, relwidth=0.71)
        self.LSSTWavefrontSensorsCheckButton.configure(activebackground="#ffffff")
        self.LSSTWavefrontSensorsCheckButton.configure(anchor=W)
        self.LSSTWavefrontSensorsCheckButton.configure(background="#ffffff")
        self.LSSTWavefrontSensorsCheckButton.configure(highlightthickness="0")
        self.LSSTWavefrontSensorsCheckButton.configure(justify=LEFT)
        self.LSSTWavefrontSensorsCheckButton.configure(takefocus="0")
        self.LSSTWavefrontSensorsCheckButton.configure(text='''Wavefront Sensors On''')
        self.LSSTWavefrontSensorsCheckButton.configure(variable=phosim_gui_support.LSSTWavefrontSensors)

        self.LSSTGuiderCheckButton = Checkbutton(self.LSSTSensorConfigurationFrame)
        self.LSSTGuiderCheckButton.place(relx=0.17, rely=0.67, relheight=0.23
                , relwidth=0.46)
        self.LSSTGuiderCheckButton.configure(activebackground="#ffffff")
        self.LSSTGuiderCheckButton.configure(anchor=W)
        self.LSSTGuiderCheckButton.configure(background="#ffffff")
        self.LSSTGuiderCheckButton.configure(highlightthickness="0")
        self.LSSTGuiderCheckButton.configure(justify=LEFT)
        self.LSSTGuiderCheckButton.configure(takefocus="0")
        self.LSSTGuiderCheckButton.configure(text='''Guiders On''')
        self.LSSTGuiderCheckButton.configure(variable=phosim_gui_support.LSSTGuiders)

        self.AllowedSensorsLabel = Label(self.CameraFrame)
        self.AllowedSensorsLabel.place(relx=0.63, rely=0.03, height=18
                , width=140)
        self.AllowedSensorsLabel.configure(activebackground="#f9f9f9")
        self.AllowedSensorsLabel.configure(anchor=W)
        self.AllowedSensorsLabel.configure(background="#ffffff")
        self.AllowedSensorsLabel.configure(font=font10)
        self.AllowedSensorsLabel.configure(text='''Allowed Sensors''')

        self.ExposureTimeLabel = Label(self.CameraFrame)
        self.ExposureTimeLabel.place(relx=0.06, rely=0.37, height=19, width=118)
        self.ExposureTimeLabel.configure(activebackground="#f9f9f9")
        self.ExposureTimeLabel.configure(anchor=E)
        self.ExposureTimeLabel.configure(background="#ffffff")
        self.ExposureTimeLabel.configure(justify=RIGHT)
        self.ExposureTimeLabel.configure(text='''Camera Rotation:''')

        self.RotCamPosEntry = Entry(self.CameraFrame)
        self.RotCamPosEntry.place(relx=0.22, rely=0.35, height=26, relwidth=0.12)

        self.RotCamPosEntry.configure(background="white")
        self.RotCamPosEntry.configure(justify=RIGHT)
        self.RotCamPosEntry.configure(selectbackground="white")
        self.RotCamPosEntry.configure(takefocus="0")
        self.RotCamPosEntry.configure(textvariable=phosim_gui_support.RotCamPos)
        self.RotCamPosEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.RotCamPos))
        self.RotCamPosEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.RotCamPosGood, phosim_gui_support.RotCamPos))
        self.RotCamPosEntry.bind('<KeyRelease>',lambda e, :phosim_gui_support.RotCamPosChange())

        self.CamRotUnitsLabel = Label(self.CameraFrame)
        self.CamRotUnitsLabel.place(relx=0.35, rely=0.37, height=19, width=36)
        self.CamRotUnitsLabel.configure(activebackground="#f9f9f9")
        self.CamRotUnitsLabel.configure(anchor=W)
        self.CamRotUnitsLabel.configure(background="#ffffff")
        self.CamRotUnitsLabel.configure(text='''deg''')

        self.LSSTSensorConfigurationFrame = Frame(self.CameraFrame)
        self.LSSTSensorConfigurationFrame.place(relx=0.66, rely=0.6
                , relheight=0.32, relwidth=0.33)
        self.LSSTSensorConfigurationFrame.configure(relief=GROOVE)
        self.LSSTSensorConfigurationFrame.configure(borderwidth="2")
        self.LSSTSensorConfigurationFrame.configure(relief=GROOVE)
        self.LSSTSensorConfigurationFrame.configure(background="#ffffff")
        self.LSSTSensorConfigurationFrame.configure(width=255)

        self.CCDConfiguratrionLabel = Label(self.LSSTSensorConfigurationFrame)
        self.CCDConfiguratrionLabel.place(relx=0.2, rely=0.1, height=19
                , width=146)
        self.CCDConfiguratrionLabel.configure(activebackground="#f9f9f9")
        self.CCDConfiguratrionLabel.configure(background="#ffffff")
        self.CCDConfiguratrionLabel.configure(text='''CCD Configuration''')

        self.CCDVoltageLabel = Label(self.LSSTSensorConfigurationFrame)
        self.CCDVoltageLabel.place(relx=0.08, rely=0.39, height=19, width=116)
        self.CCDVoltageLabel.configure(activebackground="#f9f9f9")
        self.CCDVoltageLabel.configure(anchor=E)
        self.CCDVoltageLabel.configure(background="#ffffff")
        self.CCDVoltageLabel.configure(justify=RIGHT)
        self.CCDVoltageLabel.configure(text='''Bias Voltage(V):''')

        self.CCDTemperatureLabel = Label(self.LSSTSensorConfigurationFrame)
        self.CCDTemperatureLabel.place(relx=0.0, rely=0.68, height=19, width=136)

        self.CCDTemperatureLabel.configure(activebackground="#f9f9f9")
        self.CCDTemperatureLabel.configure(anchor=E)
        self.CCDTemperatureLabel.configure(background="#ffffff")
        self.CCDTemperatureLabel.configure(justify=RIGHT)
        self.CCDTemperatureLabel.configure(text='''CCD Temperature(K):''')

        self.CCDVoltageEntry = Entry(self.LSSTSensorConfigurationFrame)
        self.CCDVoltageEntry.place(relx=0.59, rely=0.35, height=26
                , relwidth=0.37)
        self.CCDVoltageEntry.configure(background="white")
        self.CCDVoltageEntry.configure(justify=RIGHT)
        self.CCDVoltageEntry.configure(selectbackground="#c4c4c4")
        self.CCDVoltageEntry.configure(takefocus="0")
        self.CCDVoltageEntry.configure(textvariable=phosim_gui_support.CCDVoltage)
        self.CCDVoltageEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.CCDVoltage))
        self.CCDVoltageEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.CCDVoltageGood, phosim_gui_support.CCDVoltage))
        self.CCDVoltageEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.CCDVoltageChange())

        self.CCDTemperatureEntry = Entry(self.LSSTSensorConfigurationFrame)
        self.CCDTemperatureEntry.place(relx=0.59, rely=0.64, height=26
                , relwidth=0.37)
        self.CCDTemperatureEntry.configure(background="white")
        self.CCDTemperatureEntry.configure(justify=RIGHT)
        self.CCDTemperatureEntry.configure(selectbackground="#c4c4c4")
        self.CCDTemperatureEntry.configure(takefocus="0")
        self.CCDTemperatureEntry.configure(textvariable=phosim_gui_support.CCDTemperature)
        self.CCDTemperatureEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.CCDTemperature))
        self.CCDTemperatureEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.CCDTemperatureGood, phosim_gui_support.CCDTemperature))
        self.CCDTemperatureEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.CCDTemperatureChange())

        self.AdvancedTNotebook = ttk.Notebook(self.UserDefinedNotebook_t3)
        self.AdvancedTNotebook.place(relx=0.0, rely=0.0, relheight=1.01
                , relwidth=1.0)
        self.AdvancedTNotebook.configure(width=772)
        self.AdvancedTNotebook.configure(takefocus="")
        self.AdvancedTNotebook_t0 = Frame(self.AdvancedTNotebook)
        self.AdvancedTNotebook.add(self.AdvancedTNotebook_t0, padding=3)
        self.AdvancedTNotebook.tab(0, text="Physics", compound="left"
                ,underline="-1", )
        self.AdvancedTNotebook_t0.configure(background="#ffffff")
        self.AdvancedTNotebook_t1 = Frame(self.AdvancedTNotebook)
        self.AdvancedTNotebook.add(self.AdvancedTNotebook_t1, padding=3)
        self.AdvancedTNotebook.tab(1, text="Numerics", compound="left"
                ,underline="-1", )
        self.AdvancedTNotebook_t1.configure(background="#ffffff")
        self.AdvancedTNotebook_t2 = Frame(self.AdvancedTNotebook)
        self.AdvancedTNotebook.add(self.AdvancedTNotebook_t2, padding=3)
        self.AdvancedTNotebook.tab(2, text="ISC", compound="none", underline="-1"
                ,)
        self.AdvancedTNotebook_t3 = Frame(self.AdvancedTNotebook)
        self.AdvancedTNotebook.add(self.AdvancedTNotebook_t3, padding=3)
        self.AdvancedTNotebook.tab(3, text="Directory Paths", compound="none"
                ,underline="-1", )
        self.AdvancedTNotebook_t4 = Frame(self.AdvancedTNotebook)
        self.AdvancedTNotebook.add(self.AdvancedTNotebook_t4, padding=3)
        self.AdvancedTNotebook.tab(4, text="Environment", compound="none"
                ,underline="-1", )
        self.AdvancedTNotebook_t4.configure(background="#ffffff")
        self.AdvancedTNotebook_t5 = Frame(self.AdvancedTNotebook)
        self.AdvancedTNotebook.add(self.AdvancedTNotebook_t5, padding=3)
        self.AdvancedTNotebook.tab(5, text="Sun and Moon", compound="none"
                ,underline="-1", )
        self.AdvancedTNotebook_t5.configure(background="#ffffff")

        self.PhysicsFrame = Frame(self.AdvancedTNotebook_t0)
        self.PhysicsFrame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.PhysicsFrame.configure(relief=GROOVE)
        self.PhysicsFrame.configure(borderwidth="2")
        self.PhysicsFrame.configure(relief=GROOVE)
        self.PhysicsFrame.configure(background="#ffffff")
        self.PhysicsFrame.configure(width=775)

        self.Label26 = Label(self.PhysicsFrame)
        self.Label26.place(relx=0.34, rely=0.6, height=39, width=246)
        self.Label26.configure(activebackground="#f9f9f9")
        self.Label26.configure(background="#ffffff")
        self.Label26.configure(font=font10)
        self.Label26.configure(text='''More Coming Soon''')

        self.ExistingCommandFileLabel = Label(self.PhysicsFrame)
        self.ExistingCommandFileLabel.place(relx=0.02, rely=0.24, height=21
                , width=175)
        self.ExistingCommandFileLabel.configure(activebackground="#f9f9f9")
        self.ExistingCommandFileLabel.configure(anchor=NE)
        self.ExistingCommandFileLabel.configure(background="#ffffff")
        self.ExistingCommandFileLabel.configure(justify=RIGHT)
        self.ExistingCommandFileLabel.configure(text='''Existing Command File:''')

        self.ExistCmdFileNameEntry = ScrolledEntry(self.PhysicsFrame)
        self.ExistCmdFileNameEntry.place(relx=0.26, rely=0.24, height=33
                , relwidth=0.65)
        self.ExistCmdFileNameEntry.configure(background="white")
        self.ExistCmdFileNameEntry.configure(font=font9)
        self.ExistCmdFileNameEntry.configure(highlightbackground="#ffffff")
        self.ExistCmdFileNameEntry.configure(insertborderwidth="1")
        self.ExistCmdFileNameEntry.configure(selectbackground="#c4c4c4")
        self.ExistCmdFileNameEntry.configure(textvariable=phosim_gui_support.CommandFileName)
        self.ExistCmdFileNameEntry.configure(width=15)

        self.NumericsFrame = Frame(self.AdvancedTNotebook_t1)
        self.NumericsFrame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)

        self.NumericsFrame.configure(relief=GROOVE)
        self.NumericsFrame.configure(borderwidth="2")
        self.NumericsFrame.configure(relief=GROOVE)
        self.NumericsFrame.configure(background="#ffffff")
        self.NumericsFrame.configure(width=775)

        self.NThreadsEntry = Entry(self.NumericsFrame)
        self.NThreadsEntry.place(relx=0.43, rely=0.15,height=26, relwidth=0.12)
        self.NThreadsEntry.configure(background="white")
        self.NThreadsEntry.configure(justify=RIGHT)
        self.NThreadsEntry.configure(selectbackground="#c4c4c4")
        self.NThreadsEntry.configure(takefocus="0")
        self.NThreadsEntry.configure(textvariable=phosim_gui_support.nThreads)
        self.NThreadsEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.nThreads))
        self.NThreadsEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.NThreadsEntryGood, phosim_gui_support.nThreads))
        self.NThreadsEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.NumThreadsChange())

        self.NumThreadsLabel = Label(self.NumericsFrame)
        self.NumThreadsLabel.place(relx=0.14, rely=0.17, height=19, width=209)
        self.NumThreadsLabel.configure(activebackground="#f9f9f9")
        self.NumThreadsLabel.configure(anchor=E)
        self.NumThreadsLabel.configure(background="#ffffff")
        self.NumThreadsLabel.configure(justify=RIGHT)
        self.NumThreadsLabel.configure(text='''Number of Threads per Processor:''')

        self.Label21 = Label(self.NumericsFrame)
        self.Label21.place(relx=0.16, rely=0.07, height=19, width=194)
        self.Label21.configure(activebackground="#f9f9f9")
        self.Label21.configure(anchor=E)
        self.Label21.configure(background="#ffffff")
        self.Label21.configure(justify=RIGHT)
        self.Label21.configure(text='''Number of Parallel Processors:''')

        self.NProcessorsEntry = Entry(self.NumericsFrame)
        self.NProcessorsEntry.place(relx=0.43, rely=0.06, height=26
                , relwidth=0.12)
        self.NProcessorsEntry.configure(background="white")
        self.NProcessorsEntry.configure(justify=RIGHT)
        self.NProcessorsEntry.configure(selectbackground="#c4c4c4")
        self.NProcessorsEntry.configure(takefocus="0")
        self.NProcessorsEntry.configure(textvariable=phosim_gui_support.nProcessors)
        self.NProcessorsEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.nProcessors))
        self.NProcessorsEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.NProcsEntryGood, phosim_gui_support.nProcessors))
        self.NProcessorsEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.NumProcessorsChange())

        self.DisableE2ADCButton = Checkbutton(self.NumericsFrame)
        self.DisableE2ADCButton.place(relx=0.04, rely=0.49, relheight=0.07
                , relwidth=0.39)
        self.DisableE2ADCButton.configure(activebackground="#ffffff")
        self.DisableE2ADCButton.configure(anchor=W)
        self.DisableE2ADCButton.configure(background="#ffffff")
        self.DisableE2ADCButton.configure(highlightbackground="#ffffff")
        self.DisableE2ADCButton.configure(justify=LEFT)
        self.DisableE2ADCButton.configure(takefocus="0")
        self.DisableE2ADCButton.configure(text='''Disable E2ADC Processing. Image Production''')
        self.DisableE2ADCButton.configure(variable=phosim_gui_support.DisableE2ADC)
        self.DisableE2ADCButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.ToggleButton(self.DisableE2ADCButton, phosim_gui_support.DisableE2ADC))

        self.KeepAtmScreensButton = Checkbutton(self.NumericsFrame)
        self.KeepAtmScreensButton.place(relx=0.04, rely=0.59, relheight=0.07
                , relwidth=0.33)
        self.KeepAtmScreensButton.configure(activebackground="#ffffff")
        self.KeepAtmScreensButton.configure(anchor=W)
        self.KeepAtmScreensButton.configure(background="#ffffff")
        self.KeepAtmScreensButton.configure(highlightbackground="#ffffff")
        self.KeepAtmScreensButton.configure(justify=LEFT)
        self.KeepAtmScreensButton.configure(takefocus="0")
        self.KeepAtmScreensButton.configure(text='''Keep Atmospheric Phase Screens''')
        self.KeepAtmScreensButton.configure(variable=phosim_gui_support.KeepScreens)
        self.KeepAtmScreensButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.ToggleButton(self.KeepAtmScreensButton, phosim_gui_support.KeepScreens))

        self.GridBoRadiobutton = Radiobutton(self.NumericsFrame)
        self.GridBoRadiobutton.place(relx=0.53, rely=0.84, relheight=0.1
                , relwidth=0.11)
        self.GridBoRadiobutton.configure(activebackground="#ffffff")
        self.GridBoRadiobutton.configure(anchor=W)
        self.GridBoRadiobutton.configure(background="#ffffff")
        self.GridBoRadiobutton.configure(highlightbackground="#ffffff")
        self.GridBoRadiobutton.configure(justify=LEFT)
        self.GridBoRadiobutton.configure(takefocus="0")
        self.GridBoRadiobutton.configure(text='''condor''')
        self.GridBoRadiobutton.configure(value="condor")
        self.GridBoRadiobutton.configure(variable=phosim_gui_support.GridValue)

        self.Label23 = Label(self.NumericsFrame)
        self.Label23.place(relx=0.05, rely=0.86, height=19, width=186)
        self.Label23.configure(activebackground="#f9f9f9")
        self.Label23.configure(anchor=W)
        self.Label23.configure(background="#ffffff")
        self.Label23.configure(justify=LEFT)
        self.Label23.configure(text='''Execute Remotely: Grid type:''')

        self.GridBoRadiobutton = Radiobutton(self.NumericsFrame)
        self.GridBoRadiobutton.place(relx=0.31, rely=0.84, relheight=0.1
                , relwidth=0.18)
        self.GridBoRadiobutton.configure(activebackground="#ffffff")
        self.GridBoRadiobutton.configure(anchor=W)
        self.GridBoRadiobutton.configure(background="#ffffff")
        self.GridBoRadiobutton.configure(highlightbackground="#ffffff")
        self.GridBoRadiobutton.configure(justify=LEFT)
        self.GridBoRadiobutton.configure(takefocus="0")
        self.GridBoRadiobutton.configure(text='''no:execute locally''')
        self.GridBoRadiobutton.configure(value="no")
        self.GridBoRadiobutton.configure(variable=phosim_gui_support.GridValue)

        self.GridBoRadiobutton = Radiobutton(self.NumericsFrame)
        self.GridBoRadiobutton.place(relx=0.66, rely=0.84, relheight=0.1
                , relwidth=0.09)
        self.GridBoRadiobutton.configure(activebackground="#ffffff")
        self.GridBoRadiobutton.configure(anchor=W)
        self.GridBoRadiobutton.configure(background="#ffffff")
        self.GridBoRadiobutton.configure(highlightbackground="#ffffff")
        self.GridBoRadiobutton.configure(justify=LEFT)
        self.GridBoRadiobutton.configure(takefocus="0")
        self.GridBoRadiobutton.configure(text='''cluster''')
        self.GridBoRadiobutton.configure(value="cluster")
        self.GridBoRadiobutton.configure(variable=phosim_gui_support.GridValue)

        self.GridBoRadiobutton = Radiobutton(self.NumericsFrame)
        self.GridBoRadiobutton.place(relx=0.77, rely=0.84, relheight=0.1
                , relwidth=0.11)
        self.GridBoRadiobutton.configure(activebackground="#ffffff")
        self.GridBoRadiobutton.configure(anchor=W)
        self.GridBoRadiobutton.configure(background="#ffffff")
        self.GridBoRadiobutton.configure(highlightbackground="#ffffff")
        self.GridBoRadiobutton.configure(justify=LEFT)
        self.GridBoRadiobutton.configure(takefocus="0")
        self.GridBoRadiobutton.configure(text='''diagrid''')
        self.GridBoRadiobutton.configure(value="diagrid")
        self.GridBoRadiobutton.configure(variable=phosim_gui_support.GridValue)

        self.MinSourcesLabel = Label(self.NumericsFrame)
        self.MinSourcesLabel.place(relx=0.01, rely=0.27, height=19, width=309)
        self.MinSourcesLabel.configure(activebackground="#f9f9f9")
        self.MinSourcesLabel.configure(anchor=E)
        self.MinSourcesLabel.configure(background="#ffffff")
        self.MinSourcesLabel.configure(justify=RIGHT)
        self.MinSourcesLabel.configure(text='''Minimum Sources on Chip to Enable Simulation:''')

        self.MinSourcesEntry = Entry(self.NumericsFrame)
        self.MinSourcesEntry.place(relx=0.43, rely=0.25, height=26
                , relwidth=0.12)
        self.MinSourcesEntry.configure(background="white")
        self.MinSourcesEntry.configure(justify=RIGHT)
        self.MinSourcesEntry.configure(selectbackground="#c4c4c4")
        self.MinSourcesEntry.configure(takefocus="0")
        self.MinSourcesEntry.configure(textvariable=phosim_gui_support.MinSources)
        self.MinSourcesEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.MinSources))
        self.MinSourcesEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.MinSourcesGood, phosim_gui_support.MinSources))
        self.MinSourcesEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.MinSourcesChange())

        self.ICSFrame = Frame(self.AdvancedTNotebook_t2)
        self.ICSFrame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.ICSFrame.configure(relief=GROOVE)
        self.ICSFrame.configure(borderwidth="2")
        self.ICSFrame.configure(relief=GROOVE)
        self.ICSFrame.configure(background="#ffffff")
        self.ICSFrame.configure(width=775)

        self.Label27 = Label(self.ICSFrame)
        self.Label27.place(relx=0.58, rely=0.83, height=31, width=246)
        self.Label27.configure(activebackground="#f9f9f9")
        self.Label27.configure(background="#ffffff")
        self.Label27.configure(font=font10)
        self.Label27.configure(text='''More Coming Soon''')

        self.ScrolledModifiedInstDirListBox = ScrolledListBox(self.ICSFrame)
        self.ScrolledModifiedInstDirListBox.place(relx=0.03, rely=0.16
                , relheight=0.66, relwidth=0.39)
        self.ScrolledModifiedInstDirListBox.configure(background="white")
        self.ScrolledModifiedInstDirListBox.configure(exportselection="0")
        self.ScrolledModifiedInstDirListBox.configure(font="TkTextFont")
        self.ScrolledModifiedInstDirListBox.configure(highlightcolor="#ffffff")
        self.ScrolledModifiedInstDirListBox.configure(selectbackground="#c4c4c4")
        self.ScrolledModifiedInstDirListBox.configure(selectmode=MULTIPLE)
        self.ScrolledModifiedInstDirListBox.configure(takefocus="0")
        self.ScrolledModifiedInstDirListBox.configure(width=10)
        self.ScrolledModifiedInstDirListBox.configure(listvariable=phosim_gui_support.modInstList)
        self.ScrolledModifiedInstDirListBox.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.SelectFileToModify())

        self.cpd38_t3_tNo41_t2_fra44_lab41 = Label(self.ICSFrame)
        self.cpd38_t3_tNo41_t2_fra44_lab41.place(relx=0.09, rely=0.07, height=29
                , width=187)
        self.cpd38_t3_tNo41_t2_fra44_lab41.configure(activebackground="#f9f9f9")
        self.cpd38_t3_tNo41_t2_fra44_lab41.configure(anchor=W)
        self.cpd38_t3_tNo41_t2_fra44_lab41.configure(background="#ffffff")
        self.cpd38_t3_tNo41_t2_fra44_lab41.configure(text='''Insturment Modified Directory''')

        self.EditSelectedFileButton = Button(self.ICSFrame)
        self.EditSelectedFileButton.place(relx=0.46, rely=0.13, height=27
                , width=137)
        self.EditSelectedFileButton.configure(activebackground="#ffffff")
        self.EditSelectedFileButton.configure(background="#ffffff")
        self.EditSelectedFileButton.configure(highlightbackground="#ffffff")
        self.EditSelectedFileButton.configure(text='''Edit Selected File''')
        self.EditSelectedFileButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.EditSelectedFile())

        self.Button2 = Button(self.ICSFrame)
        self.Button2.place(relx=0.46, rely=0.3, height=27, width=143)
        self.Button2.configure(activebackground="#ffffff")
        self.Button2.configure(background="#ffffff")
        self.Button2.configure(highlightbackground="#ffffff")
        self.Button2.configure(text='''RestoreSelectedFile''')
        self.Button2.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.RestoreSelectedFile())

        self.RestoreOriginalFilesButton = Button(self.ICSFrame)
        self.RestoreOriginalFilesButton.place(relx=0.46, rely=0.46, height=27
                , width=182)
        self.RestoreOriginalFilesButton.configure(activebackground="#ffffff")
        self.RestoreOriginalFilesButton.configure(background="#ffffff")
        self.RestoreOriginalFilesButton.configure(highlightbackground="#ffffff")
        self.RestoreOriginalFilesButton.configure(text='''Restore All files to Original''')
        self.RestoreOriginalFilesButton.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.RestoreAllInstFiles())

        self.UseModifiedFilesButton = Checkbutton(self.ICSFrame)
        self.UseModifiedFilesButton.place(relx=0.25, rely=0.89, relheight=0.07
                , relwidth=0.07)
        self.UseModifiedFilesButton.configure(activebackground="#ffffff")
        self.UseModifiedFilesButton.configure(anchor=E)
        self.UseModifiedFilesButton.configure(background="#ffffff")
        self.UseModifiedFilesButton.configure(highlightbackground="#ffffff")
        self.UseModifiedFilesButton.configure(justify=LEFT)
        self.UseModifiedFilesButton.configure(takefocus="0")
        self.UseModifiedFilesButton.configure(text='''Use''')
        self.UseModifiedFilesButton.configure(variable=phosim_gui_support.UseModFiles)

        self.ModifiedFilesLabel = Label(self.ICSFrame)
        self.ModifiedFilesLabel.place(relx=0.32, rely=0.89, height=19, width=84)
        self.ModifiedFilesLabel.configure(activebackground="#f9f9f9")
        self.ModifiedFilesLabel.configure(background="#20ff08")
        self.ModifiedFilesLabel.configure(text='''Modified Files''')

        self.SelectedFileLabel = Label(self.ICSFrame)
        self.SelectedFileLabel.place(relx=0.08, rely=0.89, height=19, width=84)
        self.SelectedFileLabel.configure(activebackground="#f9f9f9")
        self.SelectedFileLabel.configure(background="#7bd9d9")
        self.SelectedFileLabel.configure(text='''Selected File''')

        self.DirectoryPathsFrame = Frame(self.AdvancedTNotebook_t3)
        self.DirectoryPathsFrame.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0)
        self.DirectoryPathsFrame.configure(relief=GROOVE)
        self.DirectoryPathsFrame.configure(borderwidth="2")
        self.DirectoryPathsFrame.configure(relief=GROOVE)
        self.DirectoryPathsFrame.configure(background="#ffffff")
        self.DirectoryPathsFrame.configure(width=775)

        self.OutputImageDirLabel = Label(self.DirectoryPathsFrame)
        self.OutputImageDirLabel.place(relx=0.06, rely=0.07, height=21
                , width=195)
        self.OutputImageDirLabel.configure(activebackground="#f9f9f9")
        self.OutputImageDirLabel.configure(anchor=E)
        self.OutputImageDirLabel.configure(background="#ffffff")
        self.OutputImageDirLabel.configure(justify=RIGHT)
        self.OutputImageDirLabel.configure(text='''Output Image Directory:''')

        self.WorklDirLabel = Label(self.DirectoryPathsFrame)
        self.WorklDirLabel.place(relx=0.16, rely=0.2, height=21, width=115)
        self.WorklDirLabel.configure(activebackground="#f9f9f9")
        self.WorklDirLabel.configure(anchor=E)
        self.WorklDirLabel.configure(background="#ffffff")
        self.WorklDirLabel.configure(justify=RIGHT)
        self.WorklDirLabel.configure(text='''Work Directory:''')

        self.BinaryDirLabel = Label(self.DirectoryPathsFrame)
        self.BinaryDirLabel.place(relx=0.11, rely=0.33, height=21, width=155)
        self.BinaryDirLabel.configure(activebackground="#f9f9f9")
        self.BinaryDirLabel.configure(anchor=E)
        self.BinaryDirLabel.configure(background="#ffffff")
        self.BinaryDirLabel.configure(justify=RIGHT)
        self.BinaryDirLabel.configure(text='''Binary File Directory:''')

        self.DataDirLabel = Label(self.DirectoryPathsFrame)
        self.DataDirLabel.place(relx=0.16, rely=0.46, height=21, width=115)
        self.DataDirLabel.configure(activebackground="#f9f9f9")
        self.DataDirLabel.configure(anchor=E)
        self.DataDirLabel.configure(background="#ffffff")
        self.DataDirLabel.configure(justify=RIGHT)
        self.DataDirLabel.configure(text='''Data Directory:''')

        self.SEDFileDirLabel = Label(self.DirectoryPathsFrame)
        self.SEDFileDirLabel.place(relx=0.11, rely=0.59, height=21, width=155)
        self.SEDFileDirLabel.configure(activebackground="#f9f9f9")
        self.SEDFileDirLabel.configure(anchor=E)
        self.SEDFileDirLabel.configure(background="#ffffff")
        self.SEDFileDirLabel.configure(justify=RIGHT)
        self.SEDFileDirLabel.configure(text='''SED File Directory:''')

        self.TruthImageDirLabel = Label(self.DirectoryPathsFrame)
        self.TruthImageDirLabel.place(relx=0.1, rely=0.72, height=21, width=165)
        self.TruthImageDirLabel.configure(activebackground="#f9f9f9")
        self.TruthImageDirLabel.configure(anchor=E)
        self.TruthImageDirLabel.configure(background="#ffffff")
        self.TruthImageDirLabel.configure(justify=RIGHT)
        self.TruthImageDirLabel.configure(text='''Truth Image Directory:''')

        self.OutputImageDirPathEntry = ScrolledEntry(self.DirectoryPathsFrame)
        self.OutputImageDirPathEntry.place(relx=0.32, rely=0.08, height=33
                , relwidth=0.66)
        self.OutputImageDirPathEntry.configure(background="white")
        self.OutputImageDirPathEntry.configure(highlightbackground="#ffffff")
        self.OutputImageDirPathEntry.configure(insertborderwidth="1")
        self.OutputImageDirPathEntry.configure(selectbackground="#c4c4c4")
        self.OutputImageDirPathEntry.configure(takefocus="0")
        self.OutputImageDirPathEntry.configure(textvariable=phosim_gui_support.OutputPath)
        self.OutputImageDirPathEntry.configure(width=15)
        self.OutputImageDirPathEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.OutputPath))
        self.OutputImageDirPathEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut1(phosim_gui_support.OutputPath))

        self.WorkDirPathEntry = ScrolledEntry(self.DirectoryPathsFrame)
        self.WorkDirPathEntry.place(relx=0.32, rely=0.21, height=33
                , relwidth=0.66)
        self.WorkDirPathEntry.configure(background="white")
        self.WorkDirPathEntry.configure(highlightbackground="#ffffff")
        self.WorkDirPathEntry.configure(insertborderwidth="1")
        self.WorkDirPathEntry.configure(selectbackground="#c4c4c4")
        self.WorkDirPathEntry.configure(takefocus="0")
        self.WorkDirPathEntry.configure(textvariable=phosim_gui_support.WorkPath)
        self.WorkDirPathEntry.configure(width=15)
        self.WorkDirPathEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.WorkPath))
        self.WorkDirPathEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut1(phosim_gui_support.WorkPath))

        self.BinaryDirPathEntry = ScrolledEntry(self.DirectoryPathsFrame)
        self.BinaryDirPathEntry.place(relx=0.32, rely=0.34, height=33
                , relwidth=0.66)
        self.BinaryDirPathEntry.configure(background="white")
        self.BinaryDirPathEntry.configure(highlightbackground="#ffffff")
        self.BinaryDirPathEntry.configure(insertborderwidth="1")
        self.BinaryDirPathEntry.configure(selectbackground="#c4c4c4")
        self.BinaryDirPathEntry.configure(takefocus="0")
        self.BinaryDirPathEntry.configure(textvariable=phosim_gui_support.BinaryPath)
        self.BinaryDirPathEntry.configure(width=15)
        self.BinaryDirPathEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.BinaryPath))
        self.BinaryDirPathEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut1(phosim_gui_support.BinaryPath))

        self.SEDDirPathEntry = ScrolledEntry(self.DirectoryPathsFrame)
        self.SEDDirPathEntry.place(relx=0.32, rely=0.6, height=33, relwidth=0.66)

        self.SEDDirPathEntry.configure(background="white")
        self.SEDDirPathEntry.configure(highlightbackground="#ffffff")
        self.SEDDirPathEntry.configure(insertborderwidth="1")
        self.SEDDirPathEntry.configure(selectbackground="#c4c4c4")
        self.SEDDirPathEntry.configure(takefocus="0")
        self.SEDDirPathEntry.configure(textvariable=phosim_gui_support.SEDPath)
        self.SEDDirPathEntry.configure(width=15)
        self.SEDDirPathEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.SEDPath))
        self.SEDDirPathEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut1(phosim_gui_support.SEDPath))

        self.DataDirPathEntry = ScrolledEntry(self.DirectoryPathsFrame)
        self.DataDirPathEntry.place(relx=0.32, rely=0.47, height=33
                , relwidth=0.66)
        self.DataDirPathEntry.configure(background="white")
        self.DataDirPathEntry.configure(highlightbackground="#ffffff")
        self.DataDirPathEntry.configure(insertborderwidth="1")
        self.DataDirPathEntry.configure(selectbackground="#c4c4c4")
        self.DataDirPathEntry.configure(takefocus="0")
        self.DataDirPathEntry.configure(textvariable=phosim_gui_support.DataPath)
        self.DataDirPathEntry.configure(width=15)
        self.DataDirPathEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.DataPath))
        self.DataDirPathEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut1(phosim_gui_support.DataPath))

        self.TruthImageDirPathEntry = ScrolledEntry(self.DirectoryPathsFrame)
        self.TruthImageDirPathEntry.place(relx=0.32, rely=0.73, height=33
                , relwidth=0.66)
        self.TruthImageDirPathEntry.configure(background="white")
        self.TruthImageDirPathEntry.configure(highlightbackground="#ffffff")
        self.TruthImageDirPathEntry.configure(insertborderwidth="1")
        self.TruthImageDirPathEntry.configure(selectbackground="#c4c4c4")
        self.TruthImageDirPathEntry.configure(takefocus="0")
        self.TruthImageDirPathEntry.configure(textvariable=phosim_gui_support.TruthImagePath)
        self.TruthImageDirPathEntry.configure(width=15)
        self.TruthImageDirPathEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.TruthImagePath))
        self.TruthImageDirPathEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut1(phosim_gui_support.TruthImagePath))

        self.EnvironmentFrame = Frame(self.AdvancedTNotebook_t4)
        self.EnvironmentFrame.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0)
        self.EnvironmentFrame.configure(relief=GROOVE)
        self.EnvironmentFrame.configure(borderwidth="2")
        self.EnvironmentFrame.configure(relief=GROOVE)
        self.EnvironmentFrame.configure(background="#ffffff")
        self.EnvironmentFrame.configure(width=775)

        self.SeeingEntry = Entry(self.EnvironmentFrame)
        self.SeeingEntry.place(relx=0.22, rely=0.1,height=21, relwidth=0.14)
        self.SeeingEntry.configure(background="white")
        self.SeeingEntry.configure(font="TkFixedFont")
        self.SeeingEntry.configure(justify=RIGHT)
        self.SeeingEntry.configure(selectbackground="#c4c4c4")
        self.SeeingEntry.configure(takefocus="0")
        self.SeeingEntry.configure(textvariable=phosim_gui_support.Seeing)
        self.SeeingEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.Seeing))
        self.SeeingEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.SeeingGood, phosim_gui_support.Seeing))
        self.SeeingEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.SeeingChange())

        self.SeeingLabel = Label(self.EnvironmentFrame)
        self.SeeingLabel.place(relx=0.04, rely=0.1, height=19, width=126)
        self.SeeingLabel.configure(activebackground="#f9f9f9")
        self.SeeingLabel.configure(anchor=E)
        self.SeeingLabel.configure(background="#ffffff")
        self.SeeingLabel.configure(justify=RIGHT)
        self.SeeingLabel.configure(text='''Seeing at 500nm:''')

        self.PressureLabel = Label(self.EnvironmentFrame)
        self.PressureLabel.place(relx=-0.55, rely=-0.23, height=19, width=126)
        self.PressureLabel.configure(activebackground="#f9f9f9")
        self.PressureLabel.configure(anchor=E)
        self.PressureLabel.configure(background="#ffffff")
        self.PressureLabel.configure(justify=RIGHT)
        self.PressureLabel.configure(text='''Pressure:''')

        self.TemperatureLabel = Label(self.EnvironmentFrame)
        self.TemperatureLabel.place(relx=0.04, rely=0.27, height=19, width=126)
        self.TemperatureLabel.configure(activebackground="#f9f9f9")
        self.TemperatureLabel.configure(anchor=E)
        self.TemperatureLabel.configure(background="#ffffff")
        self.TemperatureLabel.configure(justify=RIGHT)
        self.TemperatureLabel.configure(text='''Temperature:''')

        self.TemperatureEntry = Entry(self.EnvironmentFrame)
        self.TemperatureEntry.place(relx=0.22, rely=0.26, height=21
                , relwidth=0.14)
        self.TemperatureEntry.configure(background="white")
        self.TemperatureEntry.configure(font="TkFixedFont")
        self.TemperatureEntry.configure(justify=RIGHT)
        self.TemperatureEntry.configure(selectbackground="#c4c4c4")
        self.TemperatureEntry.configure(takefocus="0")
        self.TemperatureEntry.configure(textvariable=phosim_gui_support.Temperature)
        self.TemperatureEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.Temperature))
        self.TemperatureEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.TemperatureGood, phosim_gui_support.Temperature))
        self.TemperatureEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.TemperatureChange())

        self.PressureEntry = Entry(self.EnvironmentFrame)
        self.PressureEntry.place(relx=0.22, rely=0.43,height=21, relwidth=0.14)
        self.PressureEntry.configure(background="white")
        self.PressureEntry.configure(font="TkFixedFont")
        self.PressureEntry.configure(justify=RIGHT)
        self.PressureEntry.configure(selectbackground="#c4c4c4")
        self.PressureEntry.configure(takefocus="0")
        self.PressureEntry.configure(textvariable=phosim_gui_support.Pressure)
        self.PressureEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.Pressure))
        self.PressureEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.PressureGood, phosim_gui_support.Pressure))
        self.PressureEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.PressureChange())

        self.CelsiusLabel = Label(self.EnvironmentFrame)
        self.CelsiusLabel.place(relx=0.37, rely=0.27, height=19, width=56)
        self.CelsiusLabel.configure(activebackground="#f9f9f9")
        self.CelsiusLabel.configure(anchor=W)
        self.CelsiusLabel.configure(background="#ffffff")
        self.CelsiusLabel.configure(justify=LEFT)
        self.CelsiusLabel.configure(text='''Celsius''')

        self.mmHGLabel = Label(self.EnvironmentFrame)
        self.mmHGLabel.place(relx=0.37, rely=0.43, height=19, width=46)
        self.mmHGLabel.configure(activebackground="#f9f9f9")
        self.mmHGLabel.configure(anchor=W)
        self.mmHGLabel.configure(background="#ffffff")
        self.mmHGLabel.configure(justify=LEFT)
        self.mmHGLabel.configure(text='''mmHG''')

        self.SeeingDegLabel = Label(self.EnvironmentFrame)
        self.SeeingDegLabel.place(relx=0.37, rely=0.1, height=19, width=46)
        self.SeeingDegLabel.configure(activebackground="#f9f9f9")
        self.SeeingDegLabel.configure(anchor=W)
        self.SeeingDegLabel.configure(background="#ffffff")
        self.SeeingDegLabel.configure(justify=RIGHT)
        self.SeeingDegLabel.configure(text='''arcSec''')

        self.Frame2 = Frame(self.AdvancedTNotebook_t5)
        self.Frame2.place(relx=0.05, rely=0.26, relheight=0.28, relwidth=0.34)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(background="#ffffff")
        self.Frame2.configure(width=265)

        self.SUNAltitudeLabel = Label(self.Frame2)
        self.SUNAltitudeLabel.place(relx=0.06, rely=0.48, height=19, width=83)
        self.SUNAltitudeLabel.configure(activebackground="#f9f9f9")
        self.SUNAltitudeLabel.configure(anchor=E)
        self.SUNAltitudeLabel.configure(background="#ffffff")
        self.SUNAltitudeLabel.configure(justify=RIGHT)
        self.SUNAltitudeLabel.configure(text='''Sun Altitude:''')

        self.SunAltitudeEntry = Entry(self.Frame2)
        self.SunAltitudeEntry.place(relx=0.42, rely=0.47, height=21
                , relwidth=0.4)
        self.SunAltitudeEntry.configure(background="white")
        self.SunAltitudeEntry.configure(font="TkFixedFont")
        self.SunAltitudeEntry.configure(justify=RIGHT)
        self.SunAltitudeEntry.configure(selectbackground="#c4c4c4")
        self.SunAltitudeEntry.configure(takefocus="0")
        self.SunAltitudeEntry.configure(textvariable=phosim_gui_support.SunAltDeg)
        self.SunAltitudeEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.SunAltDeg))
        self.SunAltitudeEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.SunAltitudeGood, phosim_gui_support.SunAltDeg))
        self.SunAltitudeEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.SunAltitudeChange())

        self.SunAltitudeUnitsLable = Label(self.Frame2)
        self.SunAltitudeUnitsLable.place(relx=0.87, rely=0.48, height=19
                , width=27)
        self.SunAltitudeUnitsLable.configure(activebackground="#f9f9f9")
        self.SunAltitudeUnitsLable.configure(anchor=W)
        self.SunAltitudeUnitsLable.configure(background="#ffffff")
        self.SunAltitudeUnitsLable.configure(justify=LEFT)
        self.SunAltitudeUnitsLable.configure(text='''deg''')

        self.SUNLabel = Label(self.Frame2)
        self.SUNLabel.place(relx=0.45, rely=0.12, height=19, width=30)
        self.SUNLabel.configure(activebackground="#f9f9f9")
        self.SUNLabel.configure(background="#ffffff")
        self.SUNLabel.configure(text='''SUN''')

        self.Frame3 = Frame(self.AdvancedTNotebook_t5)
        self.Frame3.place(relx=0.48, rely=0.1, relheight=0.67, relwidth=0.46)
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(background="#ffffff")
        self.Frame3.configure(width=355)

        self.MOONLabel = Label(self.Frame3)
        self.MOONLabel.place(relx=0.39, rely=0.05, height=19, width=50)
        self.MOONLabel.configure(activebackground="#f9f9f9")
        self.MOONLabel.configure(background="#ffffff")
        self.MOONLabel.configure(text='''MOON''')

        self.MoonAltitudeLabel = Label(self.Frame3)
        self.MoonAltitudeLabel.place(relx=0.1, rely=0.2, height=19, width=113)
        self.MoonAltitudeLabel.configure(activebackground="#f9f9f9")
        self.MoonAltitudeLabel.configure(anchor=E)
        self.MoonAltitudeLabel.configure(background="#ffffff")
        self.MoonAltitudeLabel.configure(justify=RIGHT)
        self.MoonAltitudeLabel.configure(text='''Moon Altitude:''')

        self.MoonRALabel = Label(self.Frame3)
        self.MoonRALabel.place(relx=0.01, rely=0.35, height=19, width=143)
        self.MoonRALabel.configure(activebackground="#f9f9f9")
        self.MoonRALabel.configure(anchor=E)
        self.MoonRALabel.configure(background="#ffffff")
        self.MoonRALabel.configure(justify=RIGHT)
        self.MoonRALabel.configure(text='''Moon Right Ascension:''')

        self.MoonDeclinationLabel = Label(self.Frame3)
        self.MoonDeclinationLabel.place(relx=0.04, rely=0.49, height=19
                , width=133)
        self.MoonDeclinationLabel.configure(activebackground="#f9f9f9")
        self.MoonDeclinationLabel.configure(anchor=E)
        self.MoonDeclinationLabel.configure(background="#ffffff")
        self.MoonDeclinationLabel.configure(justify=RIGHT)
        self.MoonDeclinationLabel.configure(text='''Moon Declination:''')

        self.DistamceToMoonLabel = Label(self.Frame3)
        self.DistamceToMoonLabel.place(relx=0.04, rely=0.64, height=19
                , width=133)
        self.DistamceToMoonLabel.configure(activebackground="#f9f9f9")
        self.DistamceToMoonLabel.configure(anchor=E)
        self.DistamceToMoonLabel.configure(background="#ffffff")
        self.DistamceToMoonLabel.configure(justify=RIGHT)
        self.DistamceToMoonLabel.configure(text='''Distance To Moon:''')

        self.MoonPhaseLabel = Label(self.Frame3)
        self.MoonPhaseLabel.place(relx=0.01, rely=0.79, height=19, width=143)
        self.MoonPhaseLabel.configure(activebackground="#f9f9f9")
        self.MoonPhaseLabel.configure(anchor=E)
        self.MoonPhaseLabel.configure(background="#ffffff")
        self.MoonPhaseLabel.configure(justify=RIGHT)
        self.MoonPhaseLabel.configure(text='''Phase of the Moon:''')

        self.MoonAltitudeEntry = Entry(self.Frame3)
        self.MoonAltitudeEntry.place(relx=0.45, rely=0.2, height=21
                , relwidth=0.3)
        self.MoonAltitudeEntry.configure(background="white")
        self.MoonAltitudeEntry.configure(font="TkFixedFont")
        self.MoonAltitudeEntry.configure(justify=RIGHT)
        self.MoonAltitudeEntry.configure(selectbackground="#c4c4c4")
        self.MoonAltitudeEntry.configure(takefocus="0")
        self.MoonAltitudeEntry.configure(textvariable=phosim_gui_support.MoonAltDeg)
        self.MoonAltitudeEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.MoonAltDeg))
        self.MoonAltitudeEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.MoonAltitudeGood, phosim_gui_support.MoonAltDeg))
        self.MoonAltitudeEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.MoonAltitudeChange())

        self.MoonRAEntry = Entry(self.Frame3)
        self.MoonRAEntry.place(relx=0.45, rely=0.34,height=21, relwidth=0.3)
        self.MoonRAEntry.configure(background="white")
        self.MoonRAEntry.configure(font="TkFixedFont")
        self.MoonRAEntry.configure(justify=RIGHT)
        self.MoonRAEntry.configure(selectbackground="#c4c4c4")
        self.MoonRAEntry.configure(takefocus="0")
        self.MoonRAEntry.configure(textvariable=phosim_gui_support.MoonRADeg)
        self.MoonRAEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.MoonRADeg))
        self.MoonRAEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.MoonRAGood, phosim_gui_support.MoonRADeg))
        self.MoonRAEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.MoonRAChange())

        self.MoonDeclinationEntry = Entry(self.Frame3)
        self.MoonDeclinationEntry.place(relx=0.45, rely=0.49, height=21
                , relwidth=0.3)
        self.MoonDeclinationEntry.configure(background="white")
        self.MoonDeclinationEntry.configure(font="TkFixedFont")
        self.MoonDeclinationEntry.configure(justify=RIGHT)
        self.MoonDeclinationEntry.configure(selectbackground="#c4c4c4")
        self.MoonDeclinationEntry.configure(takefocus="0")
        self.MoonDeclinationEntry.configure(textvariable=phosim_gui_support.MoonDecDeg)
        self.MoonDeclinationEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.MoonDecDeg))
        self.MoonDeclinationEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.MoonDeclinationGood, phosim_gui_support.MoonDecDeg))
        self.MoonDeclinationEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.MoonDeclinationChange())

        self.DistanceToMoonEntry = Entry(self.Frame3)
        self.DistanceToMoonEntry.place(relx=0.45, rely=0.63, height=21
                , relwidth=0.3)
        self.DistanceToMoonEntry.configure(background="white")
        self.DistanceToMoonEntry.configure(font="TkFixedFont")
        self.DistanceToMoonEntry.configure(justify=RIGHT)
        self.DistanceToMoonEntry.configure(selectbackground="#c4c4c4")
        self.DistanceToMoonEntry.configure(takefocus="0")
        self.DistanceToMoonEntry.configure(textvariable=phosim_gui_support.MoonDistanceDeg)
        self.DistanceToMoonEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.MoonDistanceDeg))
        self.DistanceToMoonEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.MoonDistanceGood, phosim_gui_support.MoonDistanceDeg))
        self.DistanceToMoonEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.MoonDistanceChange())

        self.MoonPhaseEntry = Entry(self.Frame3)
        self.MoonPhaseEntry.place(relx=0.45, rely=0.78,height=21, relwidth=0.3)
        self.MoonPhaseEntry.configure(background="white")
        self.MoonPhaseEntry.configure(font="TkFixedFont")
        self.MoonPhaseEntry.configure(justify=RIGHT)
        self.MoonPhaseEntry.configure(selectbackground="#c4c4c4")
        self.MoonPhaseEntry.configure(takefocus="0")
        self.MoonPhaseEntry.configure(textvariable=phosim_gui_support.MoonPhase)
        self.MoonPhaseEntry.bind('<FocusIn>',lambda e:phosim_gui_support.FocusIn(phosim_gui_support.MoonPhase))
        self.MoonPhaseEntry.bind('<FocusOut>',lambda e:phosim_gui_support.FocusOut(phosim_gui_support.MoonPhaseGood, phosim_gui_support.MoonPhase))
        self.MoonPhaseEntry.bind('<KeyRelease>',lambda e:phosim_gui_support.MoonPhaseChange())

        self.MoonAltitudeUnitsLable = Label(self.Frame3)
        self.MoonAltitudeUnitsLable.place(relx=0.79, rely=0.2, height=19
                , width=27)
        self.MoonAltitudeUnitsLable.configure(activebackground="#f9f9f9")
        self.MoonAltitudeUnitsLable.configure(anchor=W)
        self.MoonAltitudeUnitsLable.configure(background="#ffffff")
        self.MoonAltitudeUnitsLable.configure(justify=LEFT)
        self.MoonAltitudeUnitsLable.configure(text='''deg''')

        self.MoonRAUnitsLable = Label(self.Frame3)
        self.MoonRAUnitsLable.place(relx=0.79, rely=0.35, height=19, width=27)
        self.MoonRAUnitsLable.configure(activebackground="#f9f9f9")
        self.MoonRAUnitsLable.configure(anchor=W)
        self.MoonRAUnitsLable.configure(background="#ffffff")
        self.MoonRAUnitsLable.configure(justify=LEFT)
        self.MoonRAUnitsLable.configure(text='''deg''')

        self.MoonDecUnitsLable = Label(self.Frame3)
        self.MoonDecUnitsLable.place(relx=0.79, rely=0.49, height=19, width=27)
        self.MoonDecUnitsLable.configure(activebackground="#f9f9f9")
        self.MoonDecUnitsLable.configure(anchor=W)
        self.MoonDecUnitsLable.configure(background="#ffffff")
        self.MoonDecUnitsLable.configure(justify=LEFT)
        self.MoonDecUnitsLable.configure(text='''deg''')

        self.MoonDistanceUnitsLable = Label(self.Frame3)
        self.MoonDistanceUnitsLable.place(relx=0.79, rely=0.64, height=19
                , width=27)
        self.MoonDistanceUnitsLable.configure(activebackground="#f9f9f9")
        self.MoonDistanceUnitsLable.configure(anchor=W)
        self.MoonDistanceUnitsLable.configure(background="#ffffff")
        self.MoonDistanceUnitsLable.configure(justify=LEFT)
        self.MoonDistanceUnitsLable.configure(text='''deg''')

        self.MoonPhaseUnitsLable = Label(self.Frame3)
        self.MoonPhaseUnitsLable.place(relx=0.76, rely=0.79, height=19, width=77)

        self.MoonPhaseUnitsLable.configure(activebackground="#f9f9f9")
        self.MoonPhaseUnitsLable.configure(anchor=W)
        self.MoonPhaseUnitsLable.configure(background="#ffffff")
        self.MoonPhaseUnitsLable.configure(justify=LEFT)
        self.MoonPhaseUnitsLable.configure(text='''% (0-100)''')
        self.UserDefinedNotebook.bind('<ButtonRelease-1>',lambda e:phosim_gui_support.TabSelected())

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.configure(background="#ffffff")
        Popupmenu1.post(event.x_root, event.y_root)





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledEntry(AutoScroll, Entry):
    '''A standard Tkinter Entry widget with a horizontal scrollbar
    that will automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Entry.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



