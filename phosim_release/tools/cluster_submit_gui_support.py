#! /usr/bin/env python
#
# Support module generated by PAGE version 4.8.9
# In conjunction with Tcl version 8.6
#   May 23, 2017 02:22:23 PM
#    May 23, 2017 03:07:52 PM
#    May 24, 2017 11:09:49 AM
#    May 24, 2017 12:27:33 PM
#    May 30, 2017 02:14:08 PM
#    May 30, 2017 02:48:48 PM
#    Jun 09, 2017 11:52:58 AM
#    Jun 12, 2017 03:34:31 PM


import os
import sys
import subprocess
import random
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global dagmanFilename
    dagmanFilename = StringVar()

    global workDirName
    workDirName = StringVar()

    global outputDirName
    outputDirName = StringVar()


    global trimDisable
    trimDisable = IntVar()

    global raytraceDisable
    raytraceDisable = IntVar()

    global e2adcDisable
    e2adcDisable = IntVar()

    global dmtcpEnable
    dmtcpEnable = IntVar()
    
    global intrnlChkptEnable
    intrnlChkptEnable = IntVar()
    
    global status
    status = StringVar()

    global CSTitle
    CSTitle = StringVar()


    global CoriPartition
    CoriPartition = StringVar()


def quitExit(p1):
    #print('clusterSubmit_support.quitExit')
    sys.stdout.flush()
    destroy_window()


def createCSCommand(p1):
    #print('clusterSubmit_support.createCSCommand')
	global w
	obj = w.cmdText
	obj.delete(1.0,END)
	obj.insert(END, "cluster_submit.py ")
	
	if trimDisable.get() == 1:
		obj.insert(END, "--Trim-Disable ")
	if raytraceDisable.get() == 1:
		obj.insert(END, "--Raytrace-Disable ")
	if e2adcDisable.get() == 1:
		obj.insert(END, "--E2adc-Disable ")
	if dmtcpEnable.get() == 1:
		obj.insert(END, "--dmtcp-checkpoint ")
	if intrnlChkptEnable.get() == 1:
		obj.insert(END, "--phosim-checkpoint ")

	host = os.getenv('HOSTNAME')
	if host[:4] == 'cori' :
		if  CoriPartition.get() == 'KNL':
			obj.insert(END, " --Cori-KNL ") 
		else:
			obj.insert(END, " --Cori-Haswell ")
	obj.insert(END, " -w ")
	obj.insert(END, workDirName.get())
	obj.insert(END, " -o ")
	obj.insert(END, outputDirName.get())
	obj.insert(END, " ")
	obj.insert(END, dagmanFilename.get())
    
    #Add a output log file and redirect std_out to it.
	uniqueStr='{:08}'.format(random.randrange(10**8))
	global logFile
	logFile = 'cs' + uniqueStr + '.log'
	obj.insert(END,' >' + logFile)

	objStatus = w.statusText
	objStatus.configure(foreground="Green")
	objStatus.delete(1.0,END)
	objStatus.insert(1.0,"Status: cluster_submit command ready for submission")

def submitClusterSubmit(p1):
    objStatus = w.statusText
    objStatus.configure(foreground="Red")
    global logFile
    status.set("Status: cluster_submit command submitted.\nWaiting for " +
			   "submission completion!")
    sys.stdout.flush()
    obj = w.cmdText
    submitCmd = obj.get(1.0,END)
	
    try:
        #subprocess.check_output(submitCmd, shell=True)
        output = subprocess.check_output(submitCmd, stderr=subprocess.STDOUT,
										 shell=True, universal_newlines=True)
    except subprocess.CalledProcessError as exc:
        objStatus.configure(foreground="Red")
        stat = ("Status : FAIL" , exc.returncode , exc.output + "\n" +
				"See log file for error message: " + logFile )
    else:
        objStatus.configure(foreground="Green")
        stat=("Status: Submission Complete. Submisison log file is ./" +
			  logFile + "\n" + "Output: \n{}\n".format(output))

    objStatus.delete(1.0,END)
    objStatus.insert(1.0,stat)


def init(top, gui, *args, **kwargs):
	global w, top_level, root
	w = gui
	top_level = top
	root = top
	host = os.getenv('HOSTNAME')
	if host[:6] == 'edison':
		CSTitle.set("cluster_subbmit on Edison")
	elif host[:4] == 'cori' :
		CSTitle.set("cluster_submit on Cori")
		#CoriPartition.set("Haswell")
	elif host[:6] == 'hammer':
		CSTitle.set("cluster_submit on Hammer")
	elif host[:8] == 'halstead':
		CSTitle.set("cluster_submit on Halstead(not in CS yet!!)")
		#CoriPartition.set("Haswell")
	else:
		print("Unknown host: " + host)
  
	CoriPartition.set("Haswell")
	
	workDirName.set("./work")
	outputDirName.set("./output")
	trimDisable.set(0)
	raytraceDisable.set(0)
	e2adcDisable.set(0)
	dmtcpEnable.set(0)
	intrnlChkptEnable.set(0)
	global logFile
	logFile = 'csHelp.txt'
	obj=w.cmdText
	obj.insert(END, "cluster_submit.py >" + logFile)

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import clusterSubmit
    clusterSubmit.vp_start_gui()


























