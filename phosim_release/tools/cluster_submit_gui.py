#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.8.9
# In conjunction with Tcl version 8.6
#    Jun 12, 2017 04:04:48 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import cluster_submit_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    cluster_submit_gui_support.set_Tk_var()
    top = ClusterSubmit (root)
    cluster_submit_gui_support.init(root, top)
    root.mainloop()

w = None
def create_ClusterSubmit(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    cluster_submit_gui_support.set_Tk_var()
    top = ClusterSubmit (w)
    cluster_submit_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ClusterSubmit():
    global w
    w.destroy()
    w = None


class ClusterSubmit:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font11 = "-family {DejaVu Sans} -size 14 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font12 = "-family {DejaVu Sans} -size 16 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font13 = "-family {DejaVu Sans Mono} -size 14 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font14 = "-family {DejaVu Sans Mono} -size 16 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font15 = "-family {DejaVu Sans Mono} -size 18 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size -12 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("699x770+521+82")
        top.title("ClusterSubmit")
        top.configure(relief="ridge")
        top.configure(highlightbackground="white")
        top.configure(highlightcolor="black")



        self.Label3 = Label(top)
        self.Label3.place(relx=0.07, rely=0.35, height=22, width=235)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor=W)
        self.Label3.configure(font=font11)
        self.Label3.configure(justify=LEFT)
        self.Label3.configure(text='''(-w) work directory(Required)''')
        self.Label3.configure(width=235)

        self.Label4 = Label(top)
        self.Label4.place(relx=0.07, rely=0.4, height=22, width=242)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(anchor=W)
        self.Label4.configure(font=font11)
        self.Label4.configure(justify=RIGHT)
        self.Label4.configure(text='''(-o) output directory(Required)''')
        self.Label4.configure(width=242)

        self.DisableRaytraceButton = Checkbutton(top)
        self.DisableRaytraceButton.place(relx=0.09, rely=0.6, relheight=0.03
                , relwidth=0.41)
        self.DisableRaytraceButton.configure(activebackground="#d9d9d9")
        self.DisableRaytraceButton.configure(anchor=W)
        self.DisableRaytraceButton.configure(font=font11)
        self.DisableRaytraceButton.configure(justify=LEFT)
        self.DisableRaytraceButton.configure(text='''Disable Running of Raytrace Tasks''')
        self.DisableRaytraceButton.configure(variable=cluster_submit_gui_support.raytraceDisable)

        self.DisableE2ADCButton = Checkbutton(top)
        self.DisableE2ADCButton.place(relx=0.09, rely=0.62, relheight=0.03
                , relwidth=0.4)
        self.DisableE2ADCButton.configure(activebackground="#d9d9d9")
        self.DisableE2ADCButton.configure(anchor=W)
        self.DisableE2ADCButton.configure(font=font11)
        self.DisableE2ADCButton.configure(text='''Disable Running of E2ADC Tasks''')
        self.DisableE2ADCButton.configure(variable=cluster_submit_gui_support.e2adcDisable)
        self.DisableE2ADCButton.configure(width=279)

        self.DMTCPEnableButton = Checkbutton(top)
        self.DMTCPEnableButton.place(relx=0.52, rely=0.57, relheight=0.03
                , relwidth=0.35)
        self.DMTCPEnableButton.configure(activebackground="#d9d9d9")
        self.DMTCPEnableButton.configure(anchor=W)
        self.DMTCPEnableButton.configure(font=font11)
        self.DMTCPEnableButton.configure(justify=LEFT)
        self.DMTCPEnableButton.configure(overrelief="flat")
        self.DMTCPEnableButton.configure(state=ACTIVE)
        self.DMTCPEnableButton.configure(text='''Enable DMTCP checkpointing''')
        self.DMTCPEnableButton.configure(variable=cluster_submit_gui_support.dmtcpEnable)

        self.Checkbutton5 = Checkbutton(top)
        self.Checkbutton5.place(relx=0.52, rely=0.6, relheight=0.03
                , relwidth=0.44)
        self.Checkbutton5.configure(activebackground="#d9d9d9")
        self.Checkbutton5.configure(anchor=W)
        self.Checkbutton5.configure(font=font11)
        self.Checkbutton5.configure(justify=LEFT)
        self.Checkbutton5.configure(state=ACTIVE)
        self.Checkbutton5.configure(text='''Enable Internal phosim Checkpointing''')
        self.Checkbutton5.configure(variable=cluster_submit_gui_support.intrnlChkptEnable)

        self.Message1 = Message(top)
        self.Message1.place(relx=0.07, rely=0.06, relheight=0.11, relwidth=0.86)
        self.Message1.configure(font=font11)
        self.Message1.configure(highlightthickness="2")
        self.Message1.configure(justify=CENTER)
        self.Message1.configure(relief=RAISED)
        self.Message1.configure(text='''This program generates and submits to a cluster the .slurm (or .pbs) jobs to generate the simulated LSST images for a visit using the phosim trim,raytrace and e2adc programs. It does this using the "dagman" and "*.submit" files that are generated by running phosim.py with the "-g condor" option.''')
        self.Message1.configure(width=599)

        self.Message2 = Message(top)
        self.Message2.place(relx=0.11, rely=0.47, relheight=0.09, relwidth=0.69)
        self.Message2.configure(font=font11)
        self.Message2.configure(justify=CENTER)
        self.Message2.configure(relief=RAISED)
        self.Message2.configure(text='''The following options can be used to control in detail what is run on the cluster. If nothing is checked, a full set of phosim programs is submitted to process a complete visit.''')
        self.Message2.configure(width=479)

        self.Message3 = Message(top)
        self.Message3.place(relx=0.11, rely=0.25, relheight=0.07, relwidth=0.69)
        self.Message3.configure(font=font11)
        self.Message3.configure(justify=CENTER)
        self.Message3.configure(relief=GROOVE)
        self.Message3.configure(text='''Specifiy paths that were used with the phosim.py -w and -o options to generate the dagman and *.submit files for this visit.''')
        self.Message3.configure(width=479)

        self.Submit = Button(top)
        self.Submit.place(relx=0.1, rely=0.86, height=55, width=133)
        self.Submit.configure(activebackground="#ff0003")
        self.Submit.configure(activeforeground="white")
        self.Submit.configure(disabledforeground="#00f300")
        self.Submit.configure(font=font12)
        self.Submit.configure(highlightbackground="#ced9d4")
        self.Submit.configure(text='''Submit Command''')
        self.Submit.configure(wraplength="100")
        self.Submit.bind('<ButtonRelease-1>',lambda e:cluster_submit_gui_support.submitClusterSubmit(e))

        self.Entry3 = Entry(top)
        self.Entry3.place(relx=0.43, rely=0.18, relheight=0.04, relwidth=0.47)
        self.Entry3.configure(background="white")
        self.Entry3.configure(font=font14)
        self.Entry3.configure(selectbackground="#c4c4c4")
        self.Entry3.configure(textvariable=cluster_submit_gui_support.dagmanFilename)

        self.Label1 = Label(top)
        self.Label1.place(relx=0.07, rely=0.19, height=19, width=236)
        self.Label1.configure(activebackground="#ffff00000000")
        self.Label1.configure(activeforeground="white")
        self.Label1.configure(activeforeground="#ff0000")
        self.Label1.configure(anchor=W)
        self.Label1.configure(font=font11)
        self.Label1.configure(justify=LEFT)
        self.Label1.configure(text='''dagman File Name(Required)''')

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.43, rely=0.34, relheight=0.04, relwidth=0.47)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font=font13)
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(textvariable=cluster_submit_gui_support.workDirName)

        self.Entry2 = Entry(top)
        self.Entry2.place(relx=0.43, rely=0.39, relheight=0.04, relwidth=0.47)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font=font13)
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(textvariable=cluster_submit_gui_support.outputDirName)

        self.DisableTrimButton = Checkbutton(top)
        self.DisableTrimButton.place(relx=0.09, rely=0.57, relheight=0.03
                , relwidth=0.37)
        self.DisableTrimButton.configure(activebackground="#d9d9d9")
        self.DisableTrimButton.configure(anchor=W)
        self.DisableTrimButton.configure(font=font11)
        self.DisableTrimButton.configure(justify=LEFT)
        self.DisableTrimButton.configure(text='''Disable Running of Trim Tasks''')
        self.DisableTrimButton.configure(variable=cluster_submit_gui_support.trimDisable)
        self.DisableTrimButton.configure(width=262)

        self.menubar = Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.createCmd = Button(top)
        self.createCmd.place(relx=0.1, rely=0.75, height=65, width=130)
        self.createCmd.configure(activebackground="#d9d9d9")
        self.createCmd.configure(font=font11)
        self.createCmd.configure(text='''Create cluster_submit Command''')
        self.createCmd.configure(wraplength="120")
        self.createCmd.bind('<ButtonRelease-1>',lambda e:cluster_submit_gui_support.createCSCommand(e))

        self.cmdText = ScrolledText(top)
        self.cmdText.place(relx=0.33, rely=0.77, relheight=0.07, relwidth=0.61)
        self.cmdText.configure(background="white")
        self.cmdText.configure(font=font12)
        self.cmdText.configure(insertborderwidth="3")
        self.cmdText.configure(selectbackground="#c4c4c4")
        self.cmdText.configure(undo="1")
        self.cmdText.configure(width=10)
        self.cmdText.configure(wrap=WORD)

        self.Exit = Button(top)
        self.Exit.place(relx=0.44, rely=0.95, height=28, width=51)
        self.Exit.configure(activebackground="#d9d9d9")
        self.Exit.configure(font=font11)
        self.Exit.configure(text='''Exit''')
        self.Exit.bind('<ButtonRelease-1>',lambda e:cluster_submit_gui_support.quitExit(e))

        self.statusText = ScrolledText(top)
        self.statusText.place(relx=0.33, rely=0.86, relheight=0.07
                , relwidth=0.61)
        self.statusText.configure(background="white")
        self.statusText.configure(font=font12)
        self.statusText.configure(insertborderwidth="3")
        self.statusText.configure(selectbackground="#c4c4c4")
        self.statusText.configure(undo="1")
        self.statusText.configure(width=10)
        self.statusText.configure(wrap=WORD)

        self.TitleEntry = Entry(top)
        self.TitleEntry.place(relx=0.17, rely=0.01, relheight=0.04
                , relwidth=0.67)
        self.TitleEntry.configure(background="white")
        self.TitleEntry.configure(font=font15)
        self.TitleEntry.configure(foreground="#0031ff")
        self.TitleEntry.configure(justify=CENTER)
        self.TitleEntry.configure(relief=RAISED)
        self.TitleEntry.configure(selectbackground="#c4c4c4")
        self.TitleEntry.configure(textvariable=cluster_submit_gui_support.CSTitle)
        self.TitleEntry.configure(width=466)

        self.Haswell = Radiobutton(top)
        self.Haswell.place(relx=0.27, rely=0.69, relheight=0.03, relwidth=0.22)
        self.Haswell.configure(activebackground="#d9d9d9")
        self.Haswell.configure(anchor=W)
        self.Haswell.configure(font=font11)
        self.Haswell.configure(justify=LEFT)
        self.Haswell.configure(text='''Haswell Parition''')
        self.Haswell.configure(value="haswell")
        self.Haswell.configure(variable=cluster_submit_gui_support.CoriPartition)
        self.Haswell.configure(width=153)

        self.KNL = Radiobutton(top)
        self.KNL.place(relx=0.52, rely=0.69, relheight=0.03, relwidth=0.2)
        self.KNL.configure(activebackground="#d9d9d9")
        self.KNL.configure(anchor=W)
        self.KNL.configure(font=font11)
        self.KNL.configure(justify=LEFT)
        self.KNL.configure(text='''KNL Partition''')
        self.KNL.configure(value="KNL")
        self.KNL.configure(variable=cluster_submit_gui_support.CoriPartition)
        self.KNL.configure(width=142)

        self.Label2 = Label(top)
        self.Label2.place(relx=0.33, rely=0.66, height=19, width=246)
        self.Label2.configure(font=font11)
        self.Label2.configure(text='''For Cori as Host Only''')
        self.Label2.configure(width=246)





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



